{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _ref; // Should be no imports here!\n// Some things that should be evaluated before all else...\n// We only want to know if non-polyfilled symbols are available\n\n\nvar hasSymbol = typeof Symbol !== \"undefined\" && typeof /*#__PURE__*/Symbol(\"x\") === \"symbol\";\nvar hasMap = typeof Map !== \"undefined\";\nvar hasSet = typeof Set !== \"undefined\";\nvar hasProxies = typeof Proxy !== \"undefined\" && typeof Proxy.revocable !== \"undefined\" && typeof Reflect !== \"undefined\";\n/**\r\n * The sentinel value returned by producers to replace the draft with undefined.\r\n */\n\nvar NOTHING = hasSymbol ? /*#__PURE__*/Symbol.for(\"immer-nothing\") : (_ref = {}, _ref[\"immer-nothing\"] = true, _ref);\n/**\r\n * To let Immer treat your class instances as plain immutable objects\r\n * (albeit with a custom prototype), you must define either an instance property\r\n * or a static property on each of your custom classes.\r\n *\r\n * Otherwise, your class instance will never be drafted, which means it won't be\r\n * safe to mutate in a produce callback.\r\n */\n\nvar DRAFTABLE = hasSymbol ? /*#__PURE__*/Symbol.for(\"immer-draftable\") : \"__$immer_draftable\";\nvar DRAFT_STATE = hasSymbol ? /*#__PURE__*/Symbol.for(\"immer-state\") : \"__$immer_state\"; // Even a polyfilled Symbol might provide Symbol.iterator\n\nvar iteratorSymbol = typeof Symbol != \"undefined\" && Symbol.iterator || \"@@iterator\";\nvar errors = {\n  0: \"Illegal state\",\n  1: \"Immer drafts cannot have computed properties\",\n  2: \"This object has been frozen and should not be mutated\",\n  3: function _(data) {\n    return \"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" + data;\n  },\n  4: \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n  5: \"Immer forbids circular references\",\n  6: \"The first or second argument to `produce` must be a function\",\n  7: \"The third argument to `produce` must be a function or undefined\",\n  8: \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n  9: \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n  10: \"The given draft is already finalized\",\n  11: \"Object.defineProperty() cannot be used on an Immer draft\",\n  12: \"Object.setPrototypeOf() cannot be used on an Immer draft\",\n  13: \"Immer only supports deleting array indices\",\n  14: \"Immer only supports setting array indices and the 'length' property\",\n  15: function _(path) {\n    return \"Cannot apply patch, path doesn't resolve: \" + path;\n  },\n  16: 'Sets cannot have \"replace\" patches.',\n  17: function _(op) {\n    return \"Unsupported patch operation: \" + op;\n  },\n  18: function _(plugin) {\n    return \"The plugin for '\" + plugin + \"' has not been loaded into Immer. To enable the plugin, import and call `enable\" + plugin + \"()` when initializing your application.\";\n  },\n  20: \"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available\",\n  21: function _(thing) {\n    return \"produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '\" + thing + \"'\";\n  },\n  22: function _(thing) {\n    return \"'current' expects a draft, got: \" + thing;\n  },\n  23: function _(thing) {\n    return \"'original' expects a draft, got: \" + thing;\n  },\n  24: \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n};\n\nfunction die(error) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  {\n    var e = errors[error];\n    var msg = !e ? \"unknown error nr: \" + error : typeof e === \"function\" ? e.apply(null, args) : e;\n    throw new Error(\"[Immer] \" + msg);\n  }\n}\n/** Returns true if the given value is an Immer draft */\n\n/*#__PURE__*/\n\n\nfunction isDraft(value) {\n  return !!value && !!value[DRAFT_STATE];\n}\n/** Returns true if the given value can be drafted by Immer */\n\n/*#__PURE__*/\n\n\nfunction isDraftable(value) {\n  var _value$constructor;\n\n  if (!value) return false;\n  return isPlainObject(value) || Array.isArray(value) || !!value[DRAFTABLE] || !!((_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor[DRAFTABLE]) || isMap(value) || isSet(value);\n}\n\nvar objectCtorString = /*#__PURE__*/Object.prototype.constructor.toString();\n/*#__PURE__*/\n\nfunction isPlainObject(value) {\n  if (!value || typeof value !== \"object\") return false;\n  var proto = Object.getPrototypeOf(value);\n\n  if (proto === null) {\n    return true;\n  }\n\n  var Ctor = Object.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n  if (Ctor === Object) return true;\n  return typeof Ctor == \"function\" && Function.toString.call(Ctor) === objectCtorString;\n}\n\nfunction original(value) {\n  if (!isDraft(value)) die(23, value);\n  return value[DRAFT_STATE].base_;\n}\n/*#__PURE__*/\n\n\nvar ownKeys = typeof Reflect !== \"undefined\" && Reflect.ownKeys ? Reflect.ownKeys : typeof Object.getOwnPropertySymbols !== \"undefined\" ? function (obj) {\n  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));\n} :\n/* istanbul ignore next */\nObject.getOwnPropertyNames;\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(target) {\n  // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n  var res = {};\n  ownKeys(target).forEach(function (key) {\n    res[key] = Object.getOwnPropertyDescriptor(target, key);\n  });\n  return res;\n};\n\nfunction each(obj, iter, enumerableOnly) {\n  if (enumerableOnly === void 0) {\n    enumerableOnly = false;\n  }\n\n  if (getArchtype(obj) === 0\n  /* Object */\n  ) {\n    (enumerableOnly ? Object.keys : ownKeys)(obj).forEach(function (key) {\n      if (!enumerableOnly || typeof key !== \"symbol\") iter(key, obj[key], obj);\n    });\n  } else {\n    obj.forEach(function (entry, index) {\n      return iter(index, entry, obj);\n    });\n  }\n}\n/*#__PURE__*/\n\n\nfunction getArchtype(thing) {\n  /* istanbul ignore next */\n  var state = thing[DRAFT_STATE];\n  return state ? state.type_ > 3 ? state.type_ - 4 // cause Object and Array map back from 4 and 5\n  : state.type_ // others are the same\n  : Array.isArray(thing) ? 1\n  /* Array */\n  : isMap(thing) ? 2\n  /* Map */\n  : isSet(thing) ? 3\n  /* Set */\n  : 0\n  /* Object */\n  ;\n}\n/*#__PURE__*/\n\n\nfunction has(thing, prop) {\n  return getArchtype(thing) === 2\n  /* Map */\n  ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);\n}\n/*#__PURE__*/\n\n\nfunction get(thing, prop) {\n  // @ts-ignore\n  return getArchtype(thing) === 2\n  /* Map */\n  ? thing.get(prop) : thing[prop];\n}\n/*#__PURE__*/\n\n\nfunction set(thing, propOrOldValue, value) {\n  var t = getArchtype(thing);\n  if (t === 2\n  /* Map */\n  ) thing.set(propOrOldValue, value);else if (t === 3\n  /* Set */\n  ) {\n    thing.add(value);\n  } else thing[propOrOldValue] = value;\n}\n/*#__PURE__*/\n\n\nfunction is(x, y) {\n  // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n/*#__PURE__*/\n\n\nfunction isMap(target) {\n  return hasMap && target instanceof Map;\n}\n/*#__PURE__*/\n\n\nfunction isSet(target) {\n  return hasSet && target instanceof Set;\n}\n/*#__PURE__*/\n\n\nfunction latest(state) {\n  return state.copy_ || state.base_;\n}\n/*#__PURE__*/\n\n\nfunction shallowCopy(base) {\n  if (Array.isArray(base)) return Array.prototype.slice.call(base);\n  var descriptors = getOwnPropertyDescriptors(base);\n  delete descriptors[DRAFT_STATE];\n  var keys = ownKeys(descriptors);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var desc = descriptors[key];\n\n    if (desc.writable === false) {\n      desc.writable = true;\n      desc.configurable = true;\n    } // like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n    // with libraries that trap values, like mobx or vue\n    // unlike object.assign, non-enumerables will be copied as well\n\n\n    if (desc.get || desc.set) descriptors[key] = {\n      configurable: true,\n      writable: true,\n      enumerable: desc.enumerable,\n      value: base[key]\n    };\n  }\n\n  return Object.create(Object.getPrototypeOf(base), descriptors);\n}\n\nfunction freeze(obj, deep) {\n  if (deep === void 0) {\n    deep = false;\n  }\n\n  if (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj;\n\n  if (getArchtype(obj) > 1\n  /* Map or Set */\n  ) {\n    obj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections;\n  }\n\n  Object.freeze(obj);\n  if (deep) each(obj, function (key, value) {\n    return freeze(value, true);\n  }, true);\n  return obj;\n}\n\nfunction dontMutateFrozenCollections() {\n  die(2);\n}\n\nfunction isFrozen(obj) {\n  if (obj == null || typeof obj !== \"object\") return true; // See #600, IE dies on non-objects in Object.isFrozen\n\n  return Object.isFrozen(obj);\n}\n/** Plugin utilities */\n\n\nvar plugins = {};\n\nfunction getPlugin(pluginKey) {\n  var plugin = plugins[pluginKey];\n\n  if (!plugin) {\n    die(18, pluginKey);\n  } // @ts-ignore\n\n\n  return plugin;\n}\n\nfunction loadPlugin(pluginKey, implementation) {\n  if (!plugins[pluginKey]) plugins[pluginKey] = implementation;\n}\n\nvar currentScope;\n\nfunction getCurrentScope() {\n  if (!currentScope) die(0);\n  return currentScope;\n}\n\nfunction createScope(parent_, immer_) {\n  return {\n    drafts_: [],\n    parent_: parent_,\n    immer_: immer_,\n    // Whenever the modified draft contains a draft from another scope, we\n    // need to prevent auto-freezing so the unowned draft can be finalized.\n    canAutoFreeze_: true,\n    unfinalizedDrafts_: 0\n  };\n}\n\nfunction usePatchesInScope(scope, patchListener) {\n  if (patchListener) {\n    getPlugin(\"Patches\"); // assert we have the plugin\n\n    scope.patches_ = [];\n    scope.inversePatches_ = [];\n    scope.patchListener_ = patchListener;\n  }\n}\n\nfunction revokeScope(scope) {\n  leaveScope(scope);\n  scope.drafts_.forEach(revokeDraft); // @ts-ignore\n\n  scope.drafts_ = null;\n}\n\nfunction leaveScope(scope) {\n  if (scope === currentScope) {\n    currentScope = scope.parent_;\n  }\n}\n\nfunction enterScope(immer) {\n  return currentScope = createScope(currentScope, immer);\n}\n\nfunction revokeDraft(draft) {\n  var state = draft[DRAFT_STATE];\n  if (state.type_ === 0\n  /* ProxyObject */\n  || state.type_ === 1\n  /* ProxyArray */\n  ) state.revoke_();else state.revoked_ = true;\n}\n\nfunction processResult(result, scope) {\n  scope.unfinalizedDrafts_ = scope.drafts_.length;\n  var baseDraft = scope.drafts_[0];\n  var isReplaced = result !== undefined && result !== baseDraft;\n  if (!scope.immer_.useProxies_) getPlugin(\"ES5\").willFinalizeES5_(scope, result, isReplaced);\n\n  if (isReplaced) {\n    if (baseDraft[DRAFT_STATE].modified_) {\n      revokeScope(scope);\n      die(4);\n    }\n\n    if (isDraftable(result)) {\n      // Finalize the result in case it contains (or is) a subset of the draft.\n      result = finalize(scope, result);\n      if (!scope.parent_) maybeFreeze(scope, result);\n    }\n\n    if (scope.patches_) {\n      getPlugin(\"Patches\").generateReplacementPatches_(baseDraft[DRAFT_STATE].base_, result, scope.patches_, scope.inversePatches_);\n    }\n  } else {\n    // Finalize the base draft.\n    result = finalize(scope, baseDraft, []);\n  }\n\n  revokeScope(scope);\n\n  if (scope.patches_) {\n    scope.patchListener_(scope.patches_, scope.inversePatches_);\n  }\n\n  return result !== NOTHING ? result : undefined;\n}\n\nfunction finalize(rootScope, value, path) {\n  // Don't recurse in tho recursive data structures\n  if (isFrozen(value)) return value;\n  var state = value[DRAFT_STATE]; // A plain object, might need freezing, might contain drafts\n\n  if (!state) {\n    each(value, function (key, childValue) {\n      return finalizeProperty(rootScope, state, value, key, childValue, path);\n    }, true // See #590, don't recurse into non-enumerable of non drafted objects\n    );\n    return value;\n  } // Never finalize drafts owned by another scope.\n\n\n  if (state.scope_ !== rootScope) return value; // Unmodified draft, return the (frozen) original\n\n  if (!state.modified_) {\n    maybeFreeze(rootScope, state.base_, true);\n    return state.base_;\n  } // Not finalized yet, let's do that now\n\n\n  if (!state.finalized_) {\n    state.finalized_ = true;\n    state.scope_.unfinalizedDrafts_--;\n    var result = // For ES5, create a good copy from the draft first, with added keys and without deleted keys.\n    state.type_ === 4\n    /* ES5Object */\n    || state.type_ === 5\n    /* ES5Array */\n    ? state.copy_ = shallowCopy(state.draft_) : state.copy_; // Finalize all children of the copy\n    // For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n    // To preserve insertion order in all cases we then clear the set\n    // And we let finalizeProperty know it needs to re-add non-draft children back to the target\n\n    var resultEach = result;\n    var isSet = false;\n\n    if (state.type_ === 3\n    /* Set */\n    ) {\n      resultEach = new Set(result);\n      result.clear();\n      isSet = true;\n    }\n\n    each(resultEach, function (key, childValue) {\n      return finalizeProperty(rootScope, state, result, key, childValue, path, isSet);\n    }); // everything inside is frozen, we can freeze here\n\n    maybeFreeze(rootScope, result, false); // first time finalizing, let's create those patches\n\n    if (path && rootScope.patches_) {\n      getPlugin(\"Patches\").generatePatches_(state, path, rootScope.patches_, rootScope.inversePatches_);\n    }\n  }\n\n  return state.copy_;\n}\n\nfunction finalizeProperty(rootScope, parentState, targetObject, prop, childValue, rootPath, targetIsSet) {\n  if (childValue === targetObject) die(5);\n\n  if (isDraft(childValue)) {\n    var path = rootPath && parentState && parentState.type_ !== 3\n    /* Set */\n    && // Set objects are atomic since they have no keys.\n    !has(parentState.assigned_, prop) // Skip deep patches for assigned keys.\n    ? rootPath.concat(prop) : undefined; // Drafts owned by `scope` are finalized here.\n\n    var res = finalize(rootScope, childValue, path);\n    set(targetObject, prop, res); // Drafts from another scope must prevented to be frozen\n    // if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\n    if (isDraft(res)) {\n      rootScope.canAutoFreeze_ = false;\n    } else return;\n  } else if (targetIsSet) {\n    targetObject.add(childValue);\n  } // Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\n\n  if (isDraftable(childValue) && !isFrozen(childValue)) {\n    if (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n      // optimization: if an object is not a draft, and we don't have to\n      // deepfreeze everything, and we are sure that no drafts are left in the remaining object\n      // cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n      // This benefits especially adding large data tree's without further processing.\n      // See add-data.js perf test\n      return;\n    }\n\n    finalize(rootScope, childValue); // immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\n    if (!parentState || !parentState.scope_.parent_) maybeFreeze(rootScope, childValue);\n  }\n}\n\nfunction maybeFreeze(scope, value, deep) {\n  if (deep === void 0) {\n    deep = false;\n  } // we never freeze for a non-root scope; as it would prevent pruning for drafts inside wrapping objects\n\n\n  if (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n    freeze(value, deep);\n  }\n}\n/**\r\n * Returns a new draft of the `base` object.\r\n *\r\n * The second argument is the parent draft-state (used internally).\r\n */\n\n\nfunction createProxyProxy(base, parent) {\n  var isArray = Array.isArray(base);\n  var state = {\n    type_: isArray ? 1\n    /* ProxyArray */\n    : 0\n    /* ProxyObject */\n    ,\n    // Track which produce call this is associated with.\n    scope_: parent ? parent.scope_ : getCurrentScope(),\n    // True for both shallow and deep changes.\n    modified_: false,\n    // Used during finalization.\n    finalized_: false,\n    // Track which properties have been assigned (true) or deleted (false).\n    assigned_: {},\n    // The parent draft state.\n    parent_: parent,\n    // The base state.\n    base_: base,\n    // The base proxy.\n    draft_: null,\n    // The base copy with any updated values.\n    copy_: null,\n    // Called by the `produce` function.\n    revoke_: null,\n    isManual_: false\n  }; // the traps must target something, a bit like the 'real' base.\n  // but also, we need to be able to determine from the target what the relevant state is\n  // (to avoid creating traps per instance to capture the state in closure,\n  // and to avoid creating weird hidden properties as well)\n  // So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n  // Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\n  var target = state;\n  var traps = objectTraps;\n\n  if (isArray) {\n    target = [state];\n    traps = arrayTraps;\n  }\n\n  var _Proxy$revocable = Proxy.revocable(target, traps),\n      revoke = _Proxy$revocable.revoke,\n      proxy = _Proxy$revocable.proxy;\n\n  state.draft_ = proxy;\n  state.revoke_ = revoke;\n  return proxy;\n}\n/**\r\n * Object drafts\r\n */\n\n\nvar objectTraps = {\n  get: function get(state, prop) {\n    if (prop === DRAFT_STATE) return state;\n    var source = latest(state);\n\n    if (!has(source, prop)) {\n      // non-existing or non-own property...\n      return readPropFromProto(state, source, prop);\n    }\n\n    var value = source[prop];\n\n    if (state.finalized_ || !isDraftable(value)) {\n      return value;\n    } // Check for existing draft in modified state.\n    // Assigned values are never drafted. This catches any drafts we created, too.\n\n\n    if (value === peek(state.base_, prop)) {\n      prepareCopy(state);\n      return state.copy_[prop] = createProxy(state.scope_.immer_, value, state);\n    }\n\n    return value;\n  },\n  has: function has(state, prop) {\n    return prop in latest(state);\n  },\n  ownKeys: function ownKeys(state) {\n    return Reflect.ownKeys(latest(state));\n  },\n  set: function set(state, prop\n  /* strictly not, but helps TS */\n  , value) {\n    var desc = getDescriptorFromProto(latest(state), prop);\n\n    if (desc === null || desc === void 0 ? void 0 : desc.set) {\n      // special case: if this write is captured by a setter, we have\n      // to trigger it with the correct context\n      desc.set.call(state.draft_, value);\n      return true;\n    }\n\n    if (!state.modified_) {\n      // the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)\n      // from setting an existing property with value undefined to undefined (which is not a change)\n      var current = peek(latest(state), prop); // special case, if we assigning the original value to a draft, we can ignore the assignment\n\n      var currentState = current === null || current === void 0 ? void 0 : current[DRAFT_STATE];\n\n      if (currentState && currentState.base_ === value) {\n        state.copy_[prop] = value;\n        state.assigned_[prop] = false;\n        return true;\n      }\n\n      if (is(value, current) && (value !== undefined || has(state.base_, prop))) return true;\n      prepareCopy(state);\n      markChanged(state);\n    }\n\n    if (state.copy_[prop] === value && ( // special case: handle new props with value 'undefined'\n    value !== undefined || prop in state.copy_) || // special case: NaN\n    Number.isNaN(value) && Number.isNaN(state.copy_[prop])) return true; // @ts-ignore\n\n    state.copy_[prop] = value;\n    state.assigned_[prop] = true;\n    return true;\n  },\n  deleteProperty: function deleteProperty(state, prop) {\n    // The `undefined` check is a fast path for pre-existing keys.\n    if (peek(state.base_, prop) !== undefined || prop in state.base_) {\n      state.assigned_[prop] = false;\n      prepareCopy(state);\n      markChanged(state);\n    } else {\n      // if an originally not assigned property was deleted\n      delete state.assigned_[prop];\n    } // @ts-ignore\n\n\n    if (state.copy_) delete state.copy_[prop];\n    return true;\n  },\n  // Note: We never coerce `desc.value` into an Immer draft, because we can't make\n  // the same guarantee in ES5 mode.\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(state, prop) {\n    var owner = latest(state);\n    var desc = Reflect.getOwnPropertyDescriptor(owner, prop);\n    if (!desc) return desc;\n    return {\n      writable: true,\n      configurable: state.type_ !== 1\n      /* ProxyArray */\n      || prop !== \"length\",\n      enumerable: desc.enumerable,\n      value: owner[prop]\n    };\n  },\n  defineProperty: function defineProperty() {\n    die(11);\n  },\n  getPrototypeOf: function getPrototypeOf(state) {\n    return Object.getPrototypeOf(state.base_);\n  },\n  setPrototypeOf: function setPrototypeOf() {\n    die(12);\n  }\n};\n/**\r\n * Array drafts\r\n */\n\nvar arrayTraps = {};\neach(objectTraps, function (key, fn) {\n  // @ts-ignore\n  arrayTraps[key] = function () {\n    arguments[0] = arguments[0][0];\n    return fn.apply(this, arguments);\n  };\n});\n\narrayTraps.deleteProperty = function (state, prop) {\n  if (isNaN(parseInt(prop))) die(13); // @ts-ignore\n\n  return arrayTraps.set.call(this, state, prop, undefined);\n};\n\narrayTraps.set = function (state, prop, value) {\n  if (prop !== \"length\" && isNaN(parseInt(prop))) die(14);\n  return objectTraps.set.call(this, state[0], prop, value, state[0]);\n}; // Access a property without creating an Immer draft.\n\n\nfunction peek(draft, prop) {\n  var state = draft[DRAFT_STATE];\n  var source = state ? latest(state) : draft;\n  return source[prop];\n}\n\nfunction readPropFromProto(state, source, prop) {\n  var _desc$get;\n\n  var desc = getDescriptorFromProto(source, prop);\n  return desc ? \"value\" in desc ? desc.value : // This is a very special case, if the prop is a getter defined by the\n  // prototype, we should invoke it with the draft as context!\n  (_desc$get = desc.get) === null || _desc$get === void 0 ? void 0 : _desc$get.call(state.draft_) : undefined;\n}\n\nfunction getDescriptorFromProto(source, prop) {\n  // 'in' checks proto!\n  if (!(prop in source)) return undefined;\n  var proto = Object.getPrototypeOf(source);\n\n  while (proto) {\n    var desc = Object.getOwnPropertyDescriptor(proto, prop);\n    if (desc) return desc;\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return undefined;\n}\n\nfunction markChanged(state) {\n  if (!state.modified_) {\n    state.modified_ = true;\n\n    if (state.parent_) {\n      markChanged(state.parent_);\n    }\n  }\n}\n\nfunction prepareCopy(state) {\n  if (!state.copy_) {\n    state.copy_ = shallowCopy(state.base_);\n  }\n}\n\nvar Immer = /*#__PURE__*/function () {\n  function Immer(config) {\n    var _this = this;\n\n    this.useProxies_ = hasProxies;\n    this.autoFreeze_ = true;\n    /**\r\n     * The `produce` function takes a value and a \"recipe function\" (whose\r\n     * return value often depends on the base state). The recipe function is\r\n     * free to mutate its first argument however it wants. All mutations are\r\n     * only ever applied to a __copy__ of the base state.\r\n     *\r\n     * Pass only a function to create a \"curried producer\" which relieves you\r\n     * from passing the recipe function every time.\r\n     *\r\n     * Only plain objects and arrays are made mutable. All other objects are\r\n     * considered uncopyable.\r\n     *\r\n     * Note: This function is __bound__ to its `Immer` instance.\r\n     *\r\n     * @param {any} base - the initial state\r\n     * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified\r\n     * @param {Function} patchListener - optional function that will be called with all the patches produced here\r\n     * @returns {any} a new state, or the initial state if nothing was modified\r\n     */\n\n    this.produce = function (base, recipe, patchListener) {\n      // curried invocation\n      if (typeof base === \"function\" && typeof recipe !== \"function\") {\n        var defaultBase = recipe;\n        recipe = base;\n        var self = _this;\n        return function curriedProduce(base) {\n          var _this2 = this;\n\n          if (base === void 0) {\n            base = defaultBase;\n          }\n\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          return self.produce(base, function (draft) {\n            var _recipe;\n\n            return (_recipe = recipe).call.apply(_recipe, [_this2, draft].concat(args));\n          }); // prettier-ignore\n        };\n      }\n\n      if (typeof recipe !== \"function\") die(6);\n      if (patchListener !== undefined && typeof patchListener !== \"function\") die(7);\n      var result; // Only plain objects, arrays, and \"immerable classes\" are drafted.\n\n      if (isDraftable(base)) {\n        var scope = enterScope(_this);\n        var proxy = createProxy(_this, base, undefined);\n        var hasError = true;\n\n        try {\n          result = recipe(proxy);\n          hasError = false;\n        } finally {\n          // finally instead of catch + rethrow better preserves original stack\n          if (hasError) revokeScope(scope);else leaveScope(scope);\n        }\n\n        if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n          return result.then(function (result) {\n            usePatchesInScope(scope, patchListener);\n            return processResult(result, scope);\n          }, function (error) {\n            revokeScope(scope);\n            throw error;\n          });\n        }\n\n        usePatchesInScope(scope, patchListener);\n        return processResult(result, scope);\n      } else if (!base || typeof base !== \"object\") {\n        result = recipe(base);\n        if (result === undefined) result = base;\n        if (result === NOTHING) result = undefined;\n        if (_this.autoFreeze_) freeze(result, true);\n\n        if (patchListener) {\n          var p = [];\n          var ip = [];\n          getPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip);\n          patchListener(p, ip);\n        }\n\n        return result;\n      } else die(21, base);\n    };\n\n    this.produceWithPatches = function (base, recipe) {\n      // curried invocation\n      if (typeof base === \"function\") {\n        return function (state) {\n          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            args[_key2 - 1] = arguments[_key2];\n          }\n\n          return _this.produceWithPatches(state, function (draft) {\n            return base.apply(void 0, [draft].concat(args));\n          });\n        };\n      }\n\n      var patches, inversePatches;\n\n      var result = _this.produce(base, recipe, function (p, ip) {\n        patches = p;\n        inversePatches = ip;\n      });\n\n      if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n        return result.then(function (nextState) {\n          return [nextState, patches, inversePatches];\n        });\n      }\n\n      return [result, patches, inversePatches];\n    };\n\n    if (typeof (config === null || config === void 0 ? void 0 : config.useProxies) === \"boolean\") this.setUseProxies(config.useProxies);\n    if (typeof (config === null || config === void 0 ? void 0 : config.autoFreeze) === \"boolean\") this.setAutoFreeze(config.autoFreeze);\n  }\n\n  var _proto = Immer.prototype;\n\n  _proto.createDraft = function createDraft(base) {\n    if (!isDraftable(base)) die(8);\n    if (isDraft(base)) base = current(base);\n    var scope = enterScope(this);\n    var proxy = createProxy(this, base, undefined);\n    proxy[DRAFT_STATE].isManual_ = true;\n    leaveScope(scope);\n    return proxy;\n  };\n\n  _proto.finishDraft = function finishDraft(draft, patchListener) {\n    var state = draft && draft[DRAFT_STATE];\n    {\n      if (!state || !state.isManual_) die(9);\n      if (state.finalized_) die(10);\n    }\n    var scope = state.scope_;\n    usePatchesInScope(scope, patchListener);\n    return processResult(undefined, scope);\n  }\n  /**\r\n   * Pass true to automatically freeze all copies created by Immer.\r\n   *\r\n   * By default, auto-freezing is enabled.\r\n   */\n  ;\n\n  _proto.setAutoFreeze = function setAutoFreeze(value) {\n    this.autoFreeze_ = value;\n  }\n  /**\r\n   * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\r\n   * always faster than using ES5 proxies.\r\n   *\r\n   * By default, feature detection is used, so calling this is rarely necessary.\r\n   */\n  ;\n\n  _proto.setUseProxies = function setUseProxies(value) {\n    if (value && !hasProxies) {\n      die(20);\n    }\n\n    this.useProxies_ = value;\n  };\n\n  _proto.applyPatches = function applyPatches(base, patches) {\n    // If a patch replaces the entire state, take that replacement as base\n    // before applying patches\n    var i;\n\n    for (i = patches.length - 1; i >= 0; i--) {\n      var patch = patches[i];\n\n      if (patch.path.length === 0 && patch.op === \"replace\") {\n        base = patch.value;\n        break;\n      }\n    } // If there was a patch that replaced the entire state, start from the\n    // patch after that.\n\n\n    if (i > -1) {\n      patches = patches.slice(i + 1);\n    }\n\n    var applyPatchesImpl = getPlugin(\"Patches\").applyPatches_;\n\n    if (isDraft(base)) {\n      // N.B: never hits if some patch a replacement, patches are never drafts\n      return applyPatchesImpl(base, patches);\n    } // Otherwise, produce a copy of the base state.\n\n\n    return this.produce(base, function (draft) {\n      return applyPatchesImpl(draft, patches);\n    });\n  };\n\n  return Immer;\n}();\n\nfunction createProxy(immer, value, parent) {\n  // precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n  var draft = isMap(value) ? getPlugin(\"MapSet\").proxyMap_(value, parent) : isSet(value) ? getPlugin(\"MapSet\").proxySet_(value, parent) : immer.useProxies_ ? createProxyProxy(value, parent) : getPlugin(\"ES5\").createES5Proxy_(value, parent);\n  var scope = parent ? parent.scope_ : getCurrentScope();\n  scope.drafts_.push(draft);\n  return draft;\n}\n\nfunction current(value) {\n  if (!isDraft(value)) die(22, value);\n  return currentImpl(value);\n}\n\nfunction currentImpl(value) {\n  if (!isDraftable(value)) return value;\n  var state = value[DRAFT_STATE];\n  var copy;\n  var archType = getArchtype(value);\n\n  if (state) {\n    if (!state.modified_ && (state.type_ < 4 || !getPlugin(\"ES5\").hasChanges_(state))) return state.base_; // Optimization: avoid generating new drafts during copying\n\n    state.finalized_ = true;\n    copy = copyHelper(value, archType);\n    state.finalized_ = false;\n  } else {\n    copy = copyHelper(value, archType);\n  }\n\n  each(copy, function (key, childValue) {\n    if (state && get(state.base_, key) === childValue) return; // no need to copy or search in something that didn't change\n\n    set(copy, key, currentImpl(childValue));\n  }); // In the future, we might consider freezing here, based on the current settings\n\n  return archType === 3\n  /* Set */\n  ? new Set(copy) : copy;\n}\n\nfunction copyHelper(value, archType) {\n  // creates a shallow copy, even if it is a map or set\n  switch (archType) {\n    case 2\n    /* Map */\n    :\n      return new Map(value);\n\n    case 3\n    /* Set */\n    :\n      // Set will be cloned as array temporarily, so that we can replace individual items\n      return Array.from(value);\n  }\n\n  return shallowCopy(value);\n}\n\nfunction enableES5() {\n  function willFinalizeES5_(scope, result, isReplaced) {\n    if (!isReplaced) {\n      if (scope.patches_) {\n        markChangesRecursively(scope.drafts_[0]);\n      } // This is faster when we don't care about which attributes changed.\n\n\n      markChangesSweep(scope.drafts_);\n    } // When a child draft is returned, look for changes.\n    else if (isDraft(result) && result[DRAFT_STATE].scope_ === scope) {\n      markChangesSweep(scope.drafts_);\n    }\n  }\n\n  function createES5Draft(isArray, base) {\n    if (isArray) {\n      var draft = new Array(base.length);\n\n      for (var i = 0; i < base.length; i++) {\n        Object.defineProperty(draft, \"\" + i, proxyProperty(i, true));\n      }\n\n      return draft;\n    } else {\n      var _descriptors = getOwnPropertyDescriptors(base);\n\n      delete _descriptors[DRAFT_STATE];\n      var keys = ownKeys(_descriptors);\n\n      for (var _i = 0; _i < keys.length; _i++) {\n        var key = keys[_i];\n        _descriptors[key] = proxyProperty(key, isArray || !!_descriptors[key].enumerable);\n      }\n\n      return Object.create(Object.getPrototypeOf(base), _descriptors);\n    }\n  }\n\n  function createES5Proxy_(base, parent) {\n    var isArray = Array.isArray(base);\n    var draft = createES5Draft(isArray, base);\n    var state = {\n      type_: isArray ? 5\n      /* ES5Array */\n      : 4\n      /* ES5Object */\n      ,\n      scope_: parent ? parent.scope_ : getCurrentScope(),\n      modified_: false,\n      finalized_: false,\n      assigned_: {},\n      parent_: parent,\n      // base is the object we are drafting\n      base_: base,\n      // draft is the draft object itself, that traps all reads and reads from either the base (if unmodified) or copy (if modified)\n      draft_: draft,\n      copy_: null,\n      revoked_: false,\n      isManual_: false\n    };\n    Object.defineProperty(draft, DRAFT_STATE, {\n      value: state,\n      // enumerable: false <- the default\n      writable: true\n    });\n    return draft;\n  } // property descriptors are recycled to make sure we don't create a get and set closure per property,\n  // but share them all instead\n\n\n  var descriptors = {};\n\n  function proxyProperty(prop, enumerable) {\n    var desc = descriptors[prop];\n\n    if (desc) {\n      desc.enumerable = enumerable;\n    } else {\n      descriptors[prop] = desc = {\n        configurable: true,\n        enumerable: enumerable,\n        get: function get() {\n          var state = this[DRAFT_STATE];\n          assertUnrevoked(state); // @ts-ignore\n\n          return objectTraps.get(state, prop);\n        },\n        set: function set(value) {\n          var state = this[DRAFT_STATE];\n          assertUnrevoked(state); // @ts-ignore\n\n          objectTraps.set(state, prop, value);\n        }\n      };\n    }\n\n    return desc;\n  } // This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\n\n\n  function markChangesSweep(drafts) {\n    // The natural order of drafts in the `scope` array is based on when they\n    // were accessed. By processing drafts in reverse natural order, we have a\n    // better chance of processing leaf nodes first. When a leaf node is known to\n    // have changed, we can avoid any traversal of its ancestor nodes.\n    for (var i = drafts.length - 1; i >= 0; i--) {\n      var state = drafts[i][DRAFT_STATE];\n\n      if (!state.modified_) {\n        switch (state.type_) {\n          case 5\n          /* ES5Array */\n          :\n            if (hasArrayChanges(state)) markChanged(state);\n            break;\n\n          case 4\n          /* ES5Object */\n          :\n            if (hasObjectChanges(state)) markChanged(state);\n            break;\n        }\n      }\n    }\n  }\n\n  function markChangesRecursively(object) {\n    if (!object || typeof object !== \"object\") return;\n    var state = object[DRAFT_STATE];\n    if (!state) return;\n    var base_ = state.base_,\n        draft_ = state.draft_,\n        assigned_ = state.assigned_,\n        type_ = state.type_;\n\n    if (type_ === 4\n    /* ES5Object */\n    ) {\n      // Look for added keys.\n      // probably there is a faster way to detect changes, as sweep + recurse seems to do some\n      // unnecessary work.\n      // also: probably we can store the information we detect here, to speed up tree finalization!\n      each(draft_, function (key) {\n        if (key === DRAFT_STATE) return; // The `undefined` check is a fast path for pre-existing keys.\n\n        if (base_[key] === undefined && !has(base_, key)) {\n          assigned_[key] = true;\n          markChanged(state);\n        } else if (!assigned_[key]) {\n          // Only untouched properties trigger recursion.\n          markChangesRecursively(draft_[key]);\n        }\n      }); // Look for removed keys.\n\n      each(base_, function (key) {\n        // The `undefined` check is a fast path for pre-existing keys.\n        if (draft_[key] === undefined && !has(draft_, key)) {\n          assigned_[key] = false;\n          markChanged(state);\n        }\n      });\n    } else if (type_ === 5\n    /* ES5Array */\n    ) {\n      if (hasArrayChanges(state)) {\n        markChanged(state);\n        assigned_.length = true;\n      }\n\n      if (draft_.length < base_.length) {\n        for (var i = draft_.length; i < base_.length; i++) {\n          assigned_[i] = false;\n        }\n      } else {\n        for (var _i2 = base_.length; _i2 < draft_.length; _i2++) {\n          assigned_[_i2] = true;\n        }\n      } // Minimum count is enough, the other parts has been processed.\n\n\n      var min = Math.min(draft_.length, base_.length);\n\n      for (var _i3 = 0; _i3 < min; _i3++) {\n        // Only untouched indices trigger recursion.\n        if (!draft_.hasOwnProperty(_i3)) {\n          assigned_[_i3] = true;\n        }\n\n        if (assigned_[_i3] === undefined) markChangesRecursively(draft_[_i3]);\n      }\n    }\n  }\n\n  function hasObjectChanges(state) {\n    var base_ = state.base_,\n        draft_ = state.draft_; // Search for added keys and changed keys. Start at the back, because\n    // non-numeric keys are ordered by time of definition on the object.\n\n    var keys = ownKeys(draft_);\n\n    for (var i = keys.length - 1; i >= 0; i--) {\n      var key = keys[i];\n      if (key === DRAFT_STATE) continue;\n      var baseValue = base_[key]; // The `undefined` check is a fast path for pre-existing keys.\n\n      if (baseValue === undefined && !has(base_, key)) {\n        return true;\n      } // Once a base key is deleted, future changes go undetected, because its\n      // descriptor is erased. This branch detects any missed changes.\n      else {\n        var value = draft_[key];\n\n        var _state = value && value[DRAFT_STATE];\n\n        if (_state ? _state.base_ !== baseValue : !is(value, baseValue)) {\n          return true;\n        }\n      }\n    } // At this point, no keys were added or changed.\n    // Compare key count to determine if keys were deleted.\n\n\n    var baseIsDraft = !!base_[DRAFT_STATE];\n    return keys.length !== ownKeys(base_).length + (baseIsDraft ? 0 : 1); // + 1 to correct for DRAFT_STATE\n  }\n\n  function hasArrayChanges(state) {\n    var draft_ = state.draft_;\n    if (draft_.length !== state.base_.length) return true; // See #116\n    // If we first shorten the length, our array interceptors will be removed.\n    // If after that new items are added, result in the same original length,\n    // those last items will have no intercepting property.\n    // So if there is no own descriptor on the last position, we know that items were removed and added\n    // N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n    // the last one\n    // last descriptor can be not a trap, if the array was extended\n\n    var descriptor = Object.getOwnPropertyDescriptor(draft_, draft_.length - 1); // descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\n    if (descriptor && !descriptor.get) return true; // if we miss a property, it has been deleted, so array probobaly changed\n\n    for (var i = 0; i < draft_.length; i++) {\n      if (!draft_.hasOwnProperty(i)) return true;\n    } // For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\n\n    return false;\n  }\n\n  function hasChanges_(state) {\n    return state.type_ === 4\n    /* ES5Object */\n    ? hasObjectChanges(state) : hasArrayChanges(state);\n  }\n\n  function assertUnrevoked(state\n  /*ES5State | MapState | SetState*/\n  ) {\n    if (state.revoked_) die(3, JSON.stringify(latest(state)));\n  }\n\n  loadPlugin(\"ES5\", {\n    createES5Proxy_: createES5Proxy_,\n    willFinalizeES5_: willFinalizeES5_,\n    hasChanges_: hasChanges_\n  });\n}\n\nfunction enablePatches() {\n  var REPLACE = \"replace\";\n  var ADD = \"add\";\n  var REMOVE = \"remove\";\n\n  function generatePatches_(state, basePath, patches, inversePatches) {\n    switch (state.type_) {\n      case 0\n      /* ProxyObject */\n      :\n      case 4\n      /* ES5Object */\n      :\n      case 2\n      /* Map */\n      :\n        return generatePatchesFromAssigned(state, basePath, patches, inversePatches);\n\n      case 5\n      /* ES5Array */\n      :\n      case 1\n      /* ProxyArray */\n      :\n        return generateArrayPatches(state, basePath, patches, inversePatches);\n\n      case 3\n      /* Set */\n      :\n        return generateSetPatches(state, basePath, patches, inversePatches);\n    }\n  }\n\n  function generateArrayPatches(state, basePath, patches, inversePatches) {\n    var base_ = state.base_,\n        assigned_ = state.assigned_;\n    var copy_ = state.copy_; // Reduce complexity by ensuring `base` is never longer.\n\n    if (copy_.length < base_.length) {\n      var _ref = [copy_, base_];\n      base_ = _ref[0];\n      copy_ = _ref[1];\n      var _ref2 = [inversePatches, patches];\n      patches = _ref2[0];\n      inversePatches = _ref2[1];\n    } // Process replaced indices.\n\n\n    for (var i = 0; i < base_.length; i++) {\n      if (assigned_[i] && copy_[i] !== base_[i]) {\n        var path = basePath.concat([i]);\n        patches.push({\n          op: REPLACE,\n          path: path,\n          // Need to maybe clone it, as it can in fact be the original value\n          // due to the base/copy inversion at the start of this function\n          value: clonePatchValueIfNeeded(copy_[i])\n        });\n        inversePatches.push({\n          op: REPLACE,\n          path: path,\n          value: clonePatchValueIfNeeded(base_[i])\n        });\n      }\n    } // Process added indices.\n\n\n    for (var _i = base_.length; _i < copy_.length; _i++) {\n      var _path = basePath.concat([_i]);\n\n      patches.push({\n        op: ADD,\n        path: _path,\n        // Need to maybe clone it, as it can in fact be the original value\n        // due to the base/copy inversion at the start of this function\n        value: clonePatchValueIfNeeded(copy_[_i])\n      });\n    }\n\n    if (base_.length < copy_.length) {\n      inversePatches.push({\n        op: REPLACE,\n        path: basePath.concat([\"length\"]),\n        value: base_.length\n      });\n    }\n  } // This is used for both Map objects and normal objects.\n\n\n  function generatePatchesFromAssigned(state, basePath, patches, inversePatches) {\n    var base_ = state.base_,\n        copy_ = state.copy_;\n    each(state.assigned_, function (key, assignedValue) {\n      var origValue = get(base_, key);\n      var value = get(copy_, key);\n      var op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD;\n      if (origValue === value && op === REPLACE) return;\n      var path = basePath.concat(key);\n      patches.push(op === REMOVE ? {\n        op: op,\n        path: path\n      } : {\n        op: op,\n        path: path,\n        value: value\n      });\n      inversePatches.push(op === ADD ? {\n        op: REMOVE,\n        path: path\n      } : op === REMOVE ? {\n        op: ADD,\n        path: path,\n        value: clonePatchValueIfNeeded(origValue)\n      } : {\n        op: REPLACE,\n        path: path,\n        value: clonePatchValueIfNeeded(origValue)\n      });\n    });\n  }\n\n  function generateSetPatches(state, basePath, patches, inversePatches) {\n    var base_ = state.base_,\n        copy_ = state.copy_;\n    var i = 0;\n    base_.forEach(function (value) {\n      if (!copy_.has(value)) {\n        var path = basePath.concat([i]);\n        patches.push({\n          op: REMOVE,\n          path: path,\n          value: value\n        });\n        inversePatches.unshift({\n          op: ADD,\n          path: path,\n          value: value\n        });\n      }\n\n      i++;\n    });\n    i = 0;\n    copy_.forEach(function (value) {\n      if (!base_.has(value)) {\n        var path = basePath.concat([i]);\n        patches.push({\n          op: ADD,\n          path: path,\n          value: value\n        });\n        inversePatches.unshift({\n          op: REMOVE,\n          path: path,\n          value: value\n        });\n      }\n\n      i++;\n    });\n  }\n\n  function generateReplacementPatches_(baseValue, replacement, patches, inversePatches) {\n    patches.push({\n      op: REPLACE,\n      path: [],\n      value: replacement === NOTHING ? undefined : replacement\n    });\n    inversePatches.push({\n      op: REPLACE,\n      path: [],\n      value: baseValue\n    });\n  }\n\n  function applyPatches_(draft, patches) {\n    patches.forEach(function (patch) {\n      var path = patch.path,\n          op = patch.op;\n      var base = draft;\n\n      for (var i = 0; i < path.length - 1; i++) {\n        var parentType = getArchtype(base);\n        var p = path[i];\n\n        if (typeof p !== \"string\" && typeof p !== \"number\") {\n          p = \"\" + p;\n        } // See #738, avoid prototype pollution\n\n\n        if ((parentType === 0\n        /* Object */\n        || parentType === 1\n        /* Array */\n        ) && (p === \"__proto__\" || p === \"constructor\")) die(24);\n        if (typeof base === \"function\" && p === \"prototype\") die(24);\n        base = get(base, p);\n        if (typeof base !== \"object\") die(15, path.join(\"/\"));\n      }\n\n      var type = getArchtype(base);\n      var value = deepClonePatchValue(patch.value); // used to clone patch to ensure original patch is not modified, see #411\n\n      var key = path[path.length - 1];\n\n      switch (op) {\n        case REPLACE:\n          switch (type) {\n            case 2\n            /* Map */\n            :\n              return base.set(key, value);\n\n            /* istanbul ignore next */\n\n            case 3\n            /* Set */\n            :\n              die(16);\n\n            default:\n              // if value is an object, then it's assigned by reference\n              // in the following add or remove ops, the value field inside the patch will also be modifyed\n              // so we use value from the cloned patch\n              // @ts-ignore\n              return base[key] = value;\n          }\n\n        case ADD:\n          switch (type) {\n            case 1\n            /* Array */\n            :\n              return key === \"-\" ? base.push(value) : base.splice(key, 0, value);\n\n            case 2\n            /* Map */\n            :\n              return base.set(key, value);\n\n            case 3\n            /* Set */\n            :\n              return base.add(value);\n\n            default:\n              return base[key] = value;\n          }\n\n        case REMOVE:\n          switch (type) {\n            case 1\n            /* Array */\n            :\n              return base.splice(key, 1);\n\n            case 2\n            /* Map */\n            :\n              return base.delete(key);\n\n            case 3\n            /* Set */\n            :\n              return base.delete(patch.value);\n\n            default:\n              return delete base[key];\n          }\n\n        default:\n          die(17, op);\n      }\n    });\n    return draft;\n  }\n\n  function deepClonePatchValue(obj) {\n    if (!isDraftable(obj)) return obj;\n    if (Array.isArray(obj)) return obj.map(deepClonePatchValue);\n    if (isMap(obj)) return new Map(Array.from(obj.entries()).map(function (_ref3) {\n      var k = _ref3[0],\n          v = _ref3[1];\n      return [k, deepClonePatchValue(v)];\n    }));\n    if (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue));\n    var cloned = Object.create(Object.getPrototypeOf(obj));\n\n    for (var key in obj) {\n      cloned[key] = deepClonePatchValue(obj[key]);\n    }\n\n    if (has(obj, DRAFTABLE)) cloned[DRAFTABLE] = obj[DRAFTABLE];\n    return cloned;\n  }\n\n  function clonePatchValueIfNeeded(obj) {\n    if (isDraft(obj)) {\n      return deepClonePatchValue(obj);\n    } else return obj;\n  }\n\n  loadPlugin(\"Patches\", {\n    applyPatches_: applyPatches_,\n    generatePatches_: generatePatches_,\n    generateReplacementPatches_: generateReplacementPatches_\n  });\n} // types only!\n\n\nfunction enableMapSet() {\n  /* istanbul ignore next */\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  }; // Ugly hack to resolve #502 and inherit built in Map / Set\n\n\n  function __extends(d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = ( // @ts-ignore\n    __.prototype = b.prototype, new __());\n  }\n\n  var DraftMap = function (_super) {\n    __extends(DraftMap, _super); // Create class manually, cause #502\n\n\n    function DraftMap(target, parent) {\n      this[DRAFT_STATE] = {\n        type_: 2\n        /* Map */\n        ,\n        parent_: parent,\n        scope_: parent ? parent.scope_ : getCurrentScope(),\n        modified_: false,\n        finalized_: false,\n        copy_: undefined,\n        assigned_: undefined,\n        base_: target,\n        draft_: this,\n        isManual_: false,\n        revoked_: false\n      };\n      return this;\n    }\n\n    var p = DraftMap.prototype;\n    Object.defineProperty(p, \"size\", {\n      get: function get() {\n        return latest(this[DRAFT_STATE]).size;\n      } // enumerable: false,\n      // configurable: true\n\n    });\n\n    p.has = function (key) {\n      return latest(this[DRAFT_STATE]).has(key);\n    };\n\n    p.set = function (key, value) {\n      var state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n\n      if (!latest(state).has(key) || latest(state).get(key) !== value) {\n        prepareMapCopy(state);\n        markChanged(state);\n        state.assigned_.set(key, true);\n        state.copy_.set(key, value);\n        state.assigned_.set(key, true);\n      }\n\n      return this;\n    };\n\n    p.delete = function (key) {\n      if (!this.has(key)) {\n        return false;\n      }\n\n      var state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n      prepareMapCopy(state);\n      markChanged(state);\n\n      if (state.base_.has(key)) {\n        state.assigned_.set(key, false);\n      } else {\n        state.assigned_.delete(key);\n      }\n\n      state.copy_.delete(key);\n      return true;\n    };\n\n    p.clear = function () {\n      var state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n\n      if (latest(state).size) {\n        prepareMapCopy(state);\n        markChanged(state);\n        state.assigned_ = new Map();\n        each(state.base_, function (key) {\n          state.assigned_.set(key, false);\n        });\n        state.copy_.clear();\n      }\n    };\n\n    p.forEach = function (cb, thisArg) {\n      var _this = this;\n\n      var state = this[DRAFT_STATE];\n      latest(state).forEach(function (_value, key, _map) {\n        cb.call(thisArg, _this.get(key), key, _this);\n      });\n    };\n\n    p.get = function (key) {\n      var state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n      var value = latest(state).get(key);\n\n      if (state.finalized_ || !isDraftable(value)) {\n        return value;\n      }\n\n      if (value !== state.base_.get(key)) {\n        return value; // either already drafted or reassigned\n      } // despite what it looks, this creates a draft only once, see above condition\n\n\n      var draft = createProxy(state.scope_.immer_, value, state);\n      prepareMapCopy(state);\n      state.copy_.set(key, draft);\n      return draft;\n    };\n\n    p.keys = function () {\n      return latest(this[DRAFT_STATE]).keys();\n    };\n\n    p.values = function () {\n      var _this2 = this,\n          _ref;\n\n      var iterator = this.keys();\n      return _ref = {}, _ref[iteratorSymbol] = function () {\n        return _this2.values();\n      }, _ref.next = function next() {\n        var r = iterator.next();\n        /* istanbul ignore next */\n\n        if (r.done) return r;\n\n        var value = _this2.get(r.value);\n\n        return {\n          done: false,\n          value: value\n        };\n      }, _ref;\n    };\n\n    p.entries = function () {\n      var _this3 = this,\n          _ref2;\n\n      var iterator = this.keys();\n      return _ref2 = {}, _ref2[iteratorSymbol] = function () {\n        return _this3.entries();\n      }, _ref2.next = function next() {\n        var r = iterator.next();\n        /* istanbul ignore next */\n\n        if (r.done) return r;\n\n        var value = _this3.get(r.value);\n\n        return {\n          done: false,\n          value: [r.value, value]\n        };\n      }, _ref2;\n    };\n\n    p[iteratorSymbol] = function () {\n      return this.entries();\n    };\n\n    return DraftMap;\n  }(Map);\n\n  function proxyMap_(target, parent) {\n    // @ts-ignore\n    return new DraftMap(target, parent);\n  }\n\n  function prepareMapCopy(state) {\n    if (!state.copy_) {\n      state.assigned_ = new Map();\n      state.copy_ = new Map(state.base_);\n    }\n  }\n\n  var DraftSet = function (_super) {\n    __extends(DraftSet, _super); // Create class manually, cause #502\n\n\n    function DraftSet(target, parent) {\n      this[DRAFT_STATE] = {\n        type_: 3\n        /* Set */\n        ,\n        parent_: parent,\n        scope_: parent ? parent.scope_ : getCurrentScope(),\n        modified_: false,\n        finalized_: false,\n        copy_: undefined,\n        base_: target,\n        draft_: this,\n        drafts_: new Map(),\n        revoked_: false,\n        isManual_: false\n      };\n      return this;\n    }\n\n    var p = DraftSet.prototype;\n    Object.defineProperty(p, \"size\", {\n      get: function get() {\n        return latest(this[DRAFT_STATE]).size;\n      } // enumerable: true,\n\n    });\n\n    p.has = function (value) {\n      var state = this[DRAFT_STATE];\n      assertUnrevoked(state); // bit of trickery here, to be able to recognize both the value, and the draft of its value\n\n      if (!state.copy_) {\n        return state.base_.has(value);\n      }\n\n      if (state.copy_.has(value)) return true;\n      if (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value))) return true;\n      return false;\n    };\n\n    p.add = function (value) {\n      var state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n\n      if (!this.has(value)) {\n        prepareSetCopy(state);\n        markChanged(state);\n        state.copy_.add(value);\n      }\n\n      return this;\n    };\n\n    p.delete = function (value) {\n      if (!this.has(value)) {\n        return false;\n      }\n\n      var state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n      prepareSetCopy(state);\n      markChanged(state);\n      return state.copy_.delete(value) || (state.drafts_.has(value) ? state.copy_.delete(state.drafts_.get(value)) :\n      /* istanbul ignore next */\n      false);\n    };\n\n    p.clear = function () {\n      var state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n\n      if (latest(state).size) {\n        prepareSetCopy(state);\n        markChanged(state);\n        state.copy_.clear();\n      }\n    };\n\n    p.values = function () {\n      var state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n      prepareSetCopy(state);\n      return state.copy_.values();\n    };\n\n    p.entries = function entries() {\n      var state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n      prepareSetCopy(state);\n      return state.copy_.entries();\n    };\n\n    p.keys = function () {\n      return this.values();\n    };\n\n    p[iteratorSymbol] = function () {\n      return this.values();\n    };\n\n    p.forEach = function forEach(cb, thisArg) {\n      var iterator = this.values();\n      var result = iterator.next();\n\n      while (!result.done) {\n        cb.call(thisArg, result.value, result.value, this);\n        result = iterator.next();\n      }\n    };\n\n    return DraftSet;\n  }(Set);\n\n  function proxySet_(target, parent) {\n    // @ts-ignore\n    return new DraftSet(target, parent);\n  }\n\n  function prepareSetCopy(state) {\n    if (!state.copy_) {\n      // create drafts for all entries to preserve insertion order\n      state.copy_ = new Set();\n      state.base_.forEach(function (value) {\n        if (isDraftable(value)) {\n          var draft = createProxy(state.scope_.immer_, value, state);\n          state.drafts_.set(value, draft);\n          state.copy_.add(draft);\n        } else {\n          state.copy_.add(value);\n        }\n      });\n    }\n  }\n\n  function assertUnrevoked(state\n  /*ES5State | MapState | SetState*/\n  ) {\n    if (state.revoked_) die(3, JSON.stringify(latest(state)));\n  }\n\n  loadPlugin(\"MapSet\", {\n    proxyMap_: proxyMap_,\n    proxySet_: proxySet_\n  });\n}\n\nfunction enableAllPlugins() {\n  enableES5();\n  enableMapSet();\n  enablePatches();\n}\n\nvar immer = /*#__PURE__*/new Immer();\n/**\r\n * The `produce` function takes a value and a \"recipe function\" (whose\r\n * return value often depends on the base state). The recipe function is\r\n * free to mutate its first argument however it wants. All mutations are\r\n * only ever applied to a __copy__ of the base state.\r\n *\r\n * Pass only a function to create a \"curried producer\" which relieves you\r\n * from passing the recipe function every time.\r\n *\r\n * Only plain objects and arrays are made mutable. All other objects are\r\n * considered uncopyable.\r\n *\r\n * Note: This function is __bound__ to its `Immer` instance.\r\n *\r\n * @param {any} base - the initial state\r\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\r\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\r\n * @returns {any} a new state, or the initial state if nothing was modified\r\n */\n\nvar produce = immer.produce;\n/**\r\n * Like `produce`, but `produceWithPatches` always returns a tuple\r\n * [nextState, patches, inversePatches] (instead of just the next state)\r\n */\n\nvar produceWithPatches = /*#__PURE__*/immer.produceWithPatches.bind(immer);\n/**\r\n * Pass true to automatically freeze all copies created by Immer.\r\n *\r\n * Always freeze by default, even in production mode\r\n */\n\nvar setAutoFreeze = /*#__PURE__*/immer.setAutoFreeze.bind(immer);\n/**\r\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\r\n * always faster than using ES5 proxies.\r\n *\r\n * By default, feature detection is used, so calling this is rarely necessary.\r\n */\n\nvar setUseProxies = /*#__PURE__*/immer.setUseProxies.bind(immer);\n/**\r\n * Apply an array of Immer patches to the first argument.\r\n *\r\n * This function is a producer, which means copy-on-write is in effect.\r\n */\n\nvar applyPatches = /*#__PURE__*/immer.applyPatches.bind(immer);\n/**\r\n * Create an Immer draft from the given base state, which may be a draft itself.\r\n * The draft can be modified until you finalize it with the `finishDraft` function.\r\n */\n\nvar createDraft = /*#__PURE__*/immer.createDraft.bind(immer);\n/**\r\n * Finalize an Immer draft from a `createDraft` call, returning the base state\r\n * (if no changes were made) or a modified copy. The draft must *not* be\r\n * mutated afterwards.\r\n *\r\n * Pass a function as the 2nd argument to generate Immer patches based on the\r\n * changes that were made.\r\n */\n\nvar finishDraft = /*#__PURE__*/immer.finishDraft.bind(immer);\n/**\r\n * This function is actually a no-op, but can be used to cast an immutable type\r\n * to an draft type and make TypeScript happy\r\n *\r\n * @param value\r\n */\n\nfunction castDraft(value) {\n  return value;\n}\n/**\r\n * This function is actually a no-op, but can be used to cast a mutable type\r\n * to an immutable type and make TypeScript happy\r\n * @param value\r\n */\n\n\nfunction castImmutable(value) {\n  return value;\n}\n\nexports.Immer = Immer;\nexports.applyPatches = applyPatches;\nexports.castDraft = castDraft;\nexports.castImmutable = castImmutable;\nexports.createDraft = createDraft;\nexports.current = current;\nexports.default = produce;\nexports.enableAllPlugins = enableAllPlugins;\nexports.enableES5 = enableES5;\nexports.enableMapSet = enableMapSet;\nexports.enablePatches = enablePatches;\nexports.finishDraft = finishDraft;\nexports.freeze = freeze;\nexports.immerable = DRAFTABLE;\nexports.isDraft = isDraft;\nexports.isDraftable = isDraftable;\nexports.nothing = NOTHING;\nexports.original = original;\nexports.produce = produce;\nexports.produceWithPatches = produceWithPatches;\nexports.setAutoFreeze = setAutoFreeze;\nexports.setUseProxies = setUseProxies;","map":{"version":3,"mappings":"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","names":["hasSymbol","Symbol","hasMap","Map","hasSet","Set","hasProxies","Proxy","revocable","Reflect","NOTHING","for","DRAFTABLE","DRAFT_STATE","iteratorSymbol","iterator","errors","data","path","op","plugin","thing","die","error","args","e","msg","apply","Error","isDraft","value","isDraftable","isPlainObject","Array","isArray","constructor","_value$constructor","isMap","isSet","objectCtorString","Object","prototype","toString","proto","getPrototypeOf","Ctor","hasOwnProperty","call","Function","original","base_","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","obj","concat","getOwnPropertyDescriptors","target","res","forEach","key","getOwnPropertyDescriptor","each","iter","enumerableOnly","getArchtype","keys","entry","index","state","type_","has","prop","get","set","propOrOldValue","t","add","is","x","y","latest","copy_","shallowCopy","base","slice","descriptors","i","length","desc","writable","configurable","enumerable","create","freeze","deep","isFrozen","clear","delete","dontMutateFrozenCollections","plugins","getPlugin","pluginKey","loadPlugin","implementation","currentScope","getCurrentScope","createScope","parent_","immer_","drafts_","canAutoFreeze_","unfinalizedDrafts_","usePatchesInScope","scope","patchListener","patches_","inversePatches_","patchListener_","revokeScope","leaveScope","revokeDraft","enterScope","immer","draft","revoke_","revoked_","processResult","result","baseDraft","isReplaced","undefined","useProxies_","willFinalizeES5_","modified_","finalize","maybeFreeze","generateReplacementPatches_","rootScope","childValue","finalizeProperty","scope_","finalized_","draft_","resultEach","generatePatches_","parentState","targetObject","rootPath","targetIsSet","assigned_","autoFreeze_","createProxyProxy","parent","isManual_","traps","objectTraps","arrayTraps","revoke","proxy","source","readPropFromProto","peek","prepareCopy","createProxy","getDescriptorFromProto","current","currentState","markChanged","Number","isNaN","deleteProperty","owner","defineProperty","setPrototypeOf","fn","arguments","parseInt","_desc$get","Immer","config","recipe","defaultBase","self","_this","curriedProduce","produce","_this2","hasError","Promise","then","p","ip","produceWithPatches","patches","inversePatches","nextState","useProxies","setUseProxies","autoFreeze","setAutoFreeze","_proto","createDraft","finishDraft","applyPatches","patch","applyPatchesImpl","applyPatches_","proxyMap_","proxySet_","createES5Proxy_","push","currentImpl","copy","archType","hasChanges_","copyHelper","from","enableES5","markChangesRecursively","markChangesSweep","createES5Draft","proxyProperty","assertUnrevoked","drafts","hasArrayChanges","hasObjectChanges","object","min","Math","baseValue","baseIsDraft","descriptor","JSON","stringify","enablePatches","REPLACE","ADD","REMOVE","basePath","generatePatchesFromAssigned","generateArrayPatches","generateSetPatches","clonePatchValueIfNeeded","assignedValue","origValue","unshift","replacement","parentType","join","type","deepClonePatchValue","splice","map","entries","k","v","cloned","immerable","enableMapSet","extendStatics","d","b","__proto__","__extends","__","DraftMap","_super","size","prepareMapCopy","cb","thisArg","_value","_map","values","next","r","done","_this3","DraftSet","prepareSetCopy","enableAllPlugins","bind","castDraft","castImmutable"],"sources":["/app/node_modules/immer/src/utils/env.ts","/app/node_modules/immer/src/utils/errors.ts","/app/node_modules/immer/src/utils/common.ts","/app/node_modules/immer/src/utils/plugins.ts","/app/node_modules/immer/src/core/scope.ts","/app/node_modules/immer/src/core/finalize.ts","/app/node_modules/immer/src/core/proxy.ts","/app/node_modules/immer/src/core/immerClass.ts","/app/node_modules/immer/src/core/current.ts","/app/node_modules/immer/src/plugins/es5.ts","/app/node_modules/immer/src/plugins/patches.ts","/app/node_modules/immer/src/plugins/mapset.ts","/app/node_modules/immer/src/plugins/all.ts","/app/node_modules/immer/src/immer.ts"],"sourcesContent":["// Should be no imports here!\n\n// Some things that should be evaluated before all else...\n\n// We only want to know if non-polyfilled symbols are available\nconst hasSymbol =\n\ttypeof Symbol !== \"undefined\" && typeof Symbol(\"x\") === \"symbol\"\nexport const hasMap = typeof Map !== \"undefined\"\nexport const hasSet = typeof Set !== \"undefined\"\nexport const hasProxies =\n\ttypeof Proxy !== \"undefined\" &&\n\ttypeof Proxy.revocable !== \"undefined\" &&\n\ttypeof Reflect !== \"undefined\"\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: Nothing = hasSymbol\n\t? Symbol.for(\"immer-nothing\")\n\t: ({[\"immer-nothing\"]: true} as any)\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-draftable\")\n\t: (\"__$immer_draftable\" as any)\n\nexport const DRAFT_STATE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-state\")\n\t: (\"__$immer_state\" as any)\n\n// Even a polyfilled Symbol might provide Symbol.iterator\nexport const iteratorSymbol: typeof Symbol.iterator =\n\t(typeof Symbol != \"undefined\" && Symbol.iterator) || (\"@@iterator\" as any)\n\n/** Use a class type for `nothing` so its type is unique */\nexport class Nothing {\n\t// This lets us do `Exclude<T, Nothing>`\n\t// @ts-ignore\n\tprivate _!: unique symbol\n}\n","const errors = {\n\t0: \"Illegal state\",\n\t1: \"Immer drafts cannot have computed properties\",\n\t2: \"This object has been frozen and should not be mutated\",\n\t3(data: any) {\n\t\treturn (\n\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\tdata\n\t\t)\n\t},\n\t4: \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n\t5: \"Immer forbids circular references\",\n\t6: \"The first or second argument to `produce` must be a function\",\n\t7: \"The third argument to `produce` must be a function or undefined\",\n\t8: \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n\t9: \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n\t10: \"The given draft is already finalized\",\n\t11: \"Object.defineProperty() cannot be used on an Immer draft\",\n\t12: \"Object.setPrototypeOf() cannot be used on an Immer draft\",\n\t13: \"Immer only supports deleting array indices\",\n\t14: \"Immer only supports setting array indices and the 'length' property\",\n\t15(path: string) {\n\t\treturn \"Cannot apply patch, path doesn't resolve: \" + path\n\t},\n\t16: 'Sets cannot have \"replace\" patches.',\n\t17(op: string) {\n\t\treturn \"Unsupported patch operation: \" + op\n\t},\n\t18(plugin: string) {\n\t\treturn `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`\n\t},\n\t20: \"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available\",\n\t21(thing: string) {\n\t\treturn `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`\n\t},\n\t22(thing: string) {\n\t\treturn `'current' expects a draft, got: ${thing}`\n\t},\n\t23(thing: string) {\n\t\treturn `'original' expects a draft, got: ${thing}`\n\t},\n\t24: \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n} as const\n\nexport function die(error: keyof typeof errors, ...args: any[]): never {\n\tif (__DEV__) {\n\t\tconst e = errors[error]\n\t\tconst msg = !e\n\t\t\t? \"unknown error nr: \" + error\n\t\t\t: typeof e === \"function\"\n\t\t\t? e.apply(null, args as any)\n\t\t\t: e\n\t\tthrow new Error(`[Immer] ${msg}`)\n\t}\n\tthrow new Error(\n\t\t`[Immer] minified error nr: ${error}${\n\t\t\targs.length ? \" \" + args.map(s => `'${s}'`).join(\",\") : \"\"\n\t\t}. Find the full error at: https://bit.ly/3cXEKWf`\n\t)\n}\n","import {\n\tDRAFT_STATE,\n\tDRAFTABLE,\n\thasSet,\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\thasMap,\n\tArchtype,\n\tdie\n} from \"../internal\"\n\n/** Returns true if the given value is an Immer draft */\n/*#__PURE__*/\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\n/*#__PURE__*/\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor?.[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\nconst objectCtorString = Object.prototype.constructor.toString()\n/*#__PURE__*/\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = Object.getPrototypeOf(value)\n\tif (proto === null) {\n\t\treturn true\n\t}\n\tconst Ctor =\n\t\tObject.hasOwnProperty.call(proto, \"constructor\") && proto.constructor\n\n\tif (Ctor === Object) return true\n\n\treturn (\n\t\ttypeof Ctor == \"function\" &&\n\t\tFunction.toString.call(Ctor) === objectCtorString\n\t)\n}\n\n/** Get the underlying object that is represented by the given draft */\n/*#__PURE__*/\nexport function original<T>(value: T): T | undefined\nexport function original(value: Drafted<any>): any {\n\tif (!isDraft(value)) die(23, value)\n\treturn value[DRAFT_STATE].base_\n}\n\n/*#__PURE__*/\nexport const ownKeys: (target: AnyObject) => PropertyKey[] =\n\ttypeof Reflect !== \"undefined\" && Reflect.ownKeys\n\t\t? Reflect.ownKeys\n\t\t: typeof Object.getOwnPropertySymbols !== \"undefined\"\n\t\t? obj =>\n\t\t\t\tObject.getOwnPropertyNames(obj).concat(\n\t\t\t\t\tObject.getOwnPropertySymbols(obj) as any\n\t\t\t\t)\n\t\t: /* istanbul ignore next */ Object.getOwnPropertyNames\n\nexport const getOwnPropertyDescriptors =\n\tObject.getOwnPropertyDescriptors ||\n\tfunction getOwnPropertyDescriptors(target: any) {\n\t\t// Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n\t\tconst res: any = {}\n\t\townKeys(target).forEach(key => {\n\t\t\tres[key] = Object.getOwnPropertyDescriptor(target, key)\n\t\t})\n\t\treturn res\n\t}\n\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void,\n\tenumerableOnly?: boolean\n): void\nexport function each(obj: any, iter: any, enumerableOnly = false) {\n\tif (getArchtype(obj) === Archtype.Object) {\n\t\t;(enumerableOnly ? Object.keys : ownKeys)(obj).forEach(key => {\n\t\t\tif (!enumerableOnly || typeof key !== \"symbol\") iter(key, obj[key], obj)\n\t\t})\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\n/*#__PURE__*/\nexport function getArchtype(thing: any): Archtype {\n\t/* istanbul ignore next */\n\tconst state: undefined | ImmerState = thing[DRAFT_STATE]\n\treturn state\n\t\t? state.type_ > 3\n\t\t\t? state.type_ - 4 // cause Object and Array map back from 4 and 5\n\t\t\t: (state.type_ as any) // others are the same\n\t\t: Array.isArray(thing)\n\t\t? Archtype.Array\n\t\t: isMap(thing)\n\t\t? Archtype.Map\n\t\t: isSet(thing)\n\t\t? Archtype.Set\n\t\t: Archtype.Object\n}\n\n/*#__PURE__*/\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === Archtype.Map\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\n/*#__PURE__*/\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === Archtype.Map ? thing.get(prop) : thing[prop]\n}\n\n/*#__PURE__*/\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tconst t = getArchtype(thing)\n\tif (t === Archtype.Map) thing.set(propOrOldValue, value)\n\telse if (t === Archtype.Set) {\n\t\tthing.add(value)\n\t} else thing[propOrOldValue] = value\n}\n\n/*#__PURE__*/\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\n/*#__PURE__*/\nexport function isMap(target: any): target is AnyMap {\n\treturn hasMap && target instanceof Map\n}\n\n/*#__PURE__*/\nexport function isSet(target: any): target is AnySet {\n\treturn hasSet && target instanceof Set\n}\n/*#__PURE__*/\nexport function latest(state: ImmerState): any {\n\treturn state.copy_ || state.base_\n}\n\n/*#__PURE__*/\nexport function shallowCopy(base: any) {\n\tif (Array.isArray(base)) return Array.prototype.slice.call(base)\n\tconst descriptors = getOwnPropertyDescriptors(base)\n\tdelete descriptors[DRAFT_STATE as any]\n\tlet keys = ownKeys(descriptors)\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst key: any = keys[i]\n\t\tconst desc = descriptors[key]\n\t\tif (desc.writable === false) {\n\t\t\tdesc.writable = true\n\t\t\tdesc.configurable = true\n\t\t}\n\t\t// like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n\t\t// with libraries that trap values, like mobx or vue\n\t\t// unlike object.assign, non-enumerables will be copied as well\n\t\tif (desc.get || desc.set)\n\t\t\tdescriptors[key] = {\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true, // could live with !!desc.set as well here...\n\t\t\t\tenumerable: desc.enumerable,\n\t\t\t\tvalue: base[key]\n\t\t\t}\n\t}\n\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n}\n\n/**\n * Freezes draftable objects. Returns the original object.\n * By default freezes shallowly, but if the second argument is `true` it will freeze recursively.\n *\n * @param obj\n * @param deep\n */\nexport function freeze<T>(obj: T, deep?: boolean): T\nexport function freeze<T>(obj: any, deep: boolean = false): T {\n\tif (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj\n\tif (getArchtype(obj) > 1 /* Map or Set */) {\n\t\tobj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t}\n\tObject.freeze(obj)\n\tif (deep) each(obj, (key, value) => freeze(value, true), true)\n\treturn obj\n}\n\nfunction dontMutateFrozenCollections() {\n\tdie(2)\n}\n\nexport function isFrozen(obj: any): boolean {\n\tif (obj == null || typeof obj !== \"object\") return true\n\t// See #600, IE dies on non-objects in Object.isFrozen\n\treturn Object.isFrozen(obj)\n}\n","import {\n\tImmerState,\n\tPatch,\n\tImmerScope,\n\tDrafted,\n\tAnyObject,\n\tImmerBaseState,\n\tAnyMap,\n\tAnySet,\n\tProxyType,\n\tdie\n} from \"../internal\"\n\n/** Plugin utilities */\nconst plugins: {\n\tPatches?: {\n\t\tgeneratePatches_(\n\t\t\tstate: ImmerState,\n\t\t\tbasePath: PatchPath,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tgenerateReplacementPatches_(\n\t\t\tbase: any,\n\t\t\treplacement: any,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tapplyPatches_<T>(draft: T, patches: Patch[]): T\n\t}\n\tES5?: {\n\t\twillFinalizeES5_(scope: ImmerScope, result: any, isReplaced: boolean): void\n\t\tcreateES5Proxy_<T>(\n\t\t\tbase: T,\n\t\t\tparent?: ImmerState\n\t\t): Drafted<T, ES5ObjectState | ES5ArrayState>\n\t\thasChanges_(state: ES5ArrayState | ES5ObjectState): boolean\n\t}\n\tMapSet?: {\n\t\tproxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T\n\t\tproxySet_<T extends AnySet>(target: T, parent?: ImmerState): T\n\t}\n} = {}\n\ntype Plugins = typeof plugins\n\nexport function getPlugin<K extends keyof Plugins>(\n\tpluginKey: K\n): Exclude<Plugins[K], undefined> {\n\tconst plugin = plugins[pluginKey]\n\tif (!plugin) {\n\t\tdie(18, pluginKey)\n\t}\n\t// @ts-ignore\n\treturn plugin\n}\n\nexport function loadPlugin<K extends keyof Plugins>(\n\tpluginKey: K,\n\timplementation: Plugins[K]\n): void {\n\tif (!plugins[pluginKey]) plugins[pluginKey] = implementation\n}\n\n/** ES5 Plugin */\n\ninterface ES5BaseState extends ImmerBaseState {\n\tassigned_: {[key: string]: any}\n\tparent_?: ImmerState\n\trevoked_: boolean\n}\n\nexport interface ES5ObjectState extends ES5BaseState {\n\ttype_: ProxyType.ES5Object\n\tdraft_: Drafted<AnyObject, ES5ObjectState>\n\tbase_: AnyObject\n\tcopy_: AnyObject | null\n}\n\nexport interface ES5ArrayState extends ES5BaseState {\n\ttype_: ProxyType.ES5Array\n\tdraft_: Drafted<AnyObject, ES5ArrayState>\n\tbase_: any\n\tcopy_: any\n}\n\n/** Map / Set plugin */\n\nexport interface MapState extends ImmerBaseState {\n\ttype_: ProxyType.Map\n\tcopy_: AnyMap | undefined\n\tassigned_: Map<any, boolean> | undefined\n\tbase_: AnyMap\n\trevoked_: boolean\n\tdraft_: Drafted<AnyMap, MapState>\n}\n\nexport interface SetState extends ImmerBaseState {\n\ttype_: ProxyType.Set\n\tcopy_: AnySet | undefined\n\tbase_: AnySet\n\tdrafts_: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked_: boolean\n\tdraft_: Drafted<AnySet, SetState>\n}\n\n/** Patches plugin */\n\nexport type PatchPath = (string | number)[]\n","import {\n\tPatch,\n\tPatchListener,\n\tDrafted,\n\tImmer,\n\tDRAFT_STATE,\n\tImmerState,\n\tProxyType,\n\tgetPlugin\n} from \"../internal\"\nimport {die} from \"../utils/errors\"\n\n/** Each scope represents a `produce` call. */\n\nexport interface ImmerScope {\n\tpatches_?: Patch[]\n\tinversePatches_?: Patch[]\n\tcanAutoFreeze_: boolean\n\tdrafts_: any[]\n\tparent_?: ImmerScope\n\tpatchListener_?: PatchListener\n\timmer_: Immer\n\tunfinalizedDrafts_: number\n}\n\nlet currentScope: ImmerScope | undefined\n\nexport function getCurrentScope() {\n\tif (__DEV__ && !currentScope) die(0)\n\treturn currentScope!\n}\n\nfunction createScope(\n\tparent_: ImmerScope | undefined,\n\timmer_: Immer\n): ImmerScope {\n\treturn {\n\t\tdrafts_: [],\n\t\tparent_,\n\t\timmer_,\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tcanAutoFreeze_: true,\n\t\tunfinalizedDrafts_: 0\n\t}\n}\n\nexport function usePatchesInScope(\n\tscope: ImmerScope,\n\tpatchListener?: PatchListener\n) {\n\tif (patchListener) {\n\t\tgetPlugin(\"Patches\") // assert we have the plugin\n\t\tscope.patches_ = []\n\t\tscope.inversePatches_ = []\n\t\tscope.patchListener_ = patchListener\n\t}\n}\n\nexport function revokeScope(scope: ImmerScope) {\n\tleaveScope(scope)\n\tscope.drafts_.forEach(revokeDraft)\n\t// @ts-ignore\n\tscope.drafts_ = null\n}\n\nexport function leaveScope(scope: ImmerScope) {\n\tif (scope === currentScope) {\n\t\tcurrentScope = scope.parent_\n\t}\n}\n\nexport function enterScope(immer: Immer) {\n\treturn (currentScope = createScope(currentScope, immer))\n}\n\nfunction revokeDraft(draft: Drafted) {\n\tconst state: ImmerState = draft[DRAFT_STATE]\n\tif (\n\t\tstate.type_ === ProxyType.ProxyObject ||\n\t\tstate.type_ === ProxyType.ProxyArray\n\t)\n\t\tstate.revoke_()\n\telse state.revoked_ = true\n}\n","import {\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tPatchPath,\n\teach,\n\thas,\n\tfreeze,\n\tImmerState,\n\tisDraft,\n\tSetState,\n\tset,\n\tProxyType,\n\tgetPlugin,\n\tdie,\n\trevokeScope,\n\tisFrozen,\n\tshallowCopy\n} from \"../internal\"\n\nexport function processResult(result: any, scope: ImmerScope) {\n\tscope.unfinalizedDrafts_ = scope.drafts_.length\n\tconst baseDraft = scope.drafts_![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\tif (!scope.immer_.useProxies_)\n\t\tgetPlugin(\"ES5\").willFinalizeES5_(scope, result, isReplaced)\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified_) {\n\t\t\trevokeScope(scope)\n\t\t\tdie(4)\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(scope, result)\n\t\t\tif (!scope.parent_) maybeFreeze(scope, result)\n\t\t}\n\t\tif (scope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(\n\t\t\t\tbaseDraft[DRAFT_STATE].base_,\n\t\t\t\tresult,\n\t\t\t\tscope.patches_,\n\t\t\t\tscope.inversePatches_!\n\t\t\t)\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(scope, baseDraft, [])\n\t}\n\trevokeScope(scope)\n\tif (scope.patches_) {\n\t\tscope.patchListener_!(scope.patches_, scope.inversePatches_!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(rootScope: ImmerScope, value: any, path?: PatchPath) {\n\t// Don't recurse in tho recursive data structures\n\tif (isFrozen(value)) return value\n\n\tconst state: ImmerState = value[DRAFT_STATE]\n\t// A plain object, might need freezing, might contain drafts\n\tif (!state) {\n\t\teach(\n\t\t\tvalue,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, value, key, childValue, path),\n\t\t\ttrue // See #590, don't recurse into non-enumerable of non drafted objects\n\t\t)\n\t\treturn value\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope_ !== rootScope) return value\n\t// Unmodified draft, return the (frozen) original\n\tif (!state.modified_) {\n\t\tmaybeFreeze(rootScope, state.base_, true)\n\t\treturn state.base_\n\t}\n\t// Not finalized yet, let's do that now\n\tif (!state.finalized_) {\n\t\tstate.finalized_ = true\n\t\tstate.scope_.unfinalizedDrafts_--\n\t\tconst result =\n\t\t\t// For ES5, create a good copy from the draft first, with added keys and without deleted keys.\n\t\t\tstate.type_ === ProxyType.ES5Object || state.type_ === ProxyType.ES5Array\n\t\t\t\t? (state.copy_ = shallowCopy(state.draft_))\n\t\t\t\t: state.copy_\n\t\t// Finalize all children of the copy\n\t\t// For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n\t\t// To preserve insertion order in all cases we then clear the set\n\t\t// And we let finalizeProperty know it needs to re-add non-draft children back to the target\n\t\tlet resultEach = result\n\t\tlet isSet = false\n\t\tif (state.type_ === ProxyType.Set) {\n\t\t\tresultEach = new Set(result)\n\t\t\tresult.clear()\n\t\t\tisSet = true\n\t\t}\n\t\teach(resultEach, (key, childValue) =>\n\t\t\tfinalizeProperty(rootScope, state, result, key, childValue, path, isSet)\n\t\t)\n\t\t// everything inside is frozen, we can freeze here\n\t\tmaybeFreeze(rootScope, result, false)\n\t\t// first time finalizing, let's create those patches\n\t\tif (path && rootScope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generatePatches_(\n\t\t\t\tstate,\n\t\t\t\tpath,\n\t\t\t\trootScope.patches_,\n\t\t\t\trootScope.inversePatches_!\n\t\t\t)\n\t\t}\n\t}\n\treturn state.copy_\n}\n\nfunction finalizeProperty(\n\trootScope: ImmerScope,\n\tparentState: undefined | ImmerState,\n\ttargetObject: any,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath,\n\ttargetIsSet?: boolean\n) {\n\tif (__DEV__ && childValue === targetObject) die(5)\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tparentState &&\n\t\t\tparentState!.type_ !== ProxyType.Set && // Set objects are atomic since they have no keys.\n\t\t\t!has((parentState as Exclude<ImmerState, SetState>).assigned_!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tconst res = finalize(rootScope, childValue, path)\n\t\tset(targetObject, prop, res)\n\t\t// Drafts from another scope must prevented to be frozen\n\t\t// if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\t\tif (isDraft(res)) {\n\t\t\trootScope.canAutoFreeze_ = false\n\t\t} else return\n\t} else if (targetIsSet) {\n\t\ttargetObject.add(childValue)\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\tif (isDraftable(childValue) && !isFrozen(childValue)) {\n\t\tif (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n\t\t\t// optimization: if an object is not a draft, and we don't have to\n\t\t\t// deepfreeze everything, and we are sure that no drafts are left in the remaining object\n\t\t\t// cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n\t\t\t// This benefits especially adding large data tree's without further processing.\n\t\t\t// See add-data.js perf test\n\t\t\treturn\n\t\t}\n\t\tfinalize(rootScope, childValue)\n\t\t// immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\t\tif (!parentState || !parentState.scope_.parent_)\n\t\t\tmaybeFreeze(rootScope, childValue)\n\t}\n}\n\nfunction maybeFreeze(scope: ImmerScope, value: any, deep = false) {\n\t// we never freeze for a non-root scope; as it would prevent pruning for drafts inside wrapping objects\n\tif (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n\t\tfreeze(value, deep)\n\t}\n}\n","import {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tlatest,\n\tImmerBaseState,\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tObjectish,\n\tgetCurrentScope,\n\tDRAFT_STATE,\n\tdie,\n\tcreateProxy,\n\tProxyType\n} from \"../internal\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned_: {\n\t\t[property: string]: boolean\n\t}\n\tparent_?: ImmerState\n\trevoke_(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype_: ProxyType.ProxyObject\n\tbase_: any\n\tcopy_: any\n\tdraft_: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype_: ProxyType.ProxyArray\n\tbase_: AnyArray\n\tcopy_: AnyArray | null\n\tdraft_: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxyProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype_: isArray ? ProxyType.ProxyArray : (ProxyType.ProxyObject as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified_: false,\n\t\t// Used during finalization.\n\t\tfinalized_: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned_: {},\n\t\t// The parent draft state.\n\t\tparent_: parent,\n\t\t// The base state.\n\t\tbase_: base,\n\t\t// The base proxy.\n\t\tdraft_: null as any, // set below\n\t\t// The base copy with any updated values.\n\t\tcopy_: null,\n\t\t// Called by the `produce` function.\n\t\trevoke_: null as any,\n\t\tisManual_: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft_ = proxy as any\n\tstate.revoke_ = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nexport const objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\n\t\tconst source = latest(state)\n\t\tif (!has(source, prop)) {\n\t\t\t// non-existing or non-own property...\n\t\t\treturn readPropFromProto(state, source, prop)\n\t\t}\n\t\tconst value = source[prop]\n\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\t// Check for existing draft in modified state.\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value === peek(state.base_, prop)) {\n\t\t\tprepareCopy(state)\n\t\t\treturn (state.copy_![prop as any] = createProxy(\n\t\t\t\tstate.scope_.immer_,\n\t\t\t\tvalue,\n\t\t\t\tstate\n\t\t\t))\n\t\t}\n\t\treturn value\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(\n\t\tstate: ProxyObjectState,\n\t\tprop: string /* strictly not, but helps TS */,\n\t\tvalue\n\t) {\n\t\tconst desc = getDescriptorFromProto(latest(state), prop)\n\t\tif (desc?.set) {\n\t\t\t// special case: if this write is captured by a setter, we have\n\t\t\t// to trigger it with the correct context\n\t\t\tdesc.set.call(state.draft_, value)\n\t\t\treturn true\n\t\t}\n\t\tif (!state.modified_) {\n\t\t\t// the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)\n\t\t\t// from setting an existing property with value undefined to undefined (which is not a change)\n\t\t\tconst current = peek(latest(state), prop)\n\t\t\t// special case, if we assigning the original value to a draft, we can ignore the assignment\n\t\t\tconst currentState: ProxyObjectState = current?.[DRAFT_STATE]\n\t\t\tif (currentState && currentState.base_ === value) {\n\t\t\t\tstate.copy_![prop] = value\n\t\t\t\tstate.assigned_[prop] = false\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif (is(value, current) && (value !== undefined || has(state.base_, prop)))\n\t\t\t\treturn true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\n\t\tif (\n\t\t\t(state.copy_![prop] === value &&\n\t\t\t\t// special case: handle new props with value 'undefined'\n\t\t\t\t(value !== undefined || prop in state.copy_)) ||\n\t\t\t// special case: NaN\n\t\t\t(Number.isNaN(value) && Number.isNaN(state.copy_![prop]))\n\t\t)\n\t\t\treturn true\n\n\t\t// @ts-ignore\n\t\tstate.copy_![prop] = value\n\t\tstate.assigned_[prop] = true\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base_, prop) !== undefined || prop in state.base_) {\n\t\t\tstate.assigned_[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned_[prop]\n\t\t}\n\t\t// @ts-ignore\n\t\tif (state.copy_) delete state.copy_[prop]\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (!desc) return desc\n\t\treturn {\n\t\t\twritable: true,\n\t\t\tconfigurable: state.type_ !== ProxyType.ProxyArray || prop !== \"length\",\n\t\t\tenumerable: desc.enumerable,\n\t\t\tvalue: owner[prop]\n\t\t}\n\t},\n\tdefineProperty() {\n\t\tdie(11)\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn Object.getPrototypeOf(state.base_)\n\t},\n\tsetPrototypeOf() {\n\t\tdie(12)\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (__DEV__ && isNaN(parseInt(prop as any))) die(13)\n\t// @ts-ignore\n\treturn arrayTraps.set!.call(this, state, prop, undefined)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (__DEV__ && prop !== \"length\" && isNaN(parseInt(prop as any))) die(14)\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tconst source = state ? latest(state) : draft\n\treturn source[prop]\n}\n\nfunction readPropFromProto(state: ImmerState, source: any, prop: PropertyKey) {\n\tconst desc = getDescriptorFromProto(source, prop)\n\treturn desc\n\t\t? `value` in desc\n\t\t\t? desc.value\n\t\t\t: // This is a very special case, if the prop is a getter defined by the\n\t\t\t  // prototype, we should invoke it with the draft as context!\n\t\t\t  desc.get?.call(state.draft_)\n\t\t: undefined\n}\n\nfunction getDescriptorFromProto(\n\tsource: any,\n\tprop: PropertyKey\n): PropertyDescriptor | undefined {\n\t// 'in' checks proto!\n\tif (!(prop in source)) return undefined\n\tlet proto = Object.getPrototypeOf(source)\n\twhile (proto) {\n\t\tconst desc = Object.getOwnPropertyDescriptor(proto, prop)\n\t\tif (desc) return desc\n\t\tproto = Object.getPrototypeOf(proto)\n\t}\n\treturn undefined\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified_) {\n\t\tstate.modified_ = true\n\t\tif (state.parent_) {\n\t\t\tmarkChanged(state.parent_)\n\t\t}\n\t}\n}\n\nexport function prepareCopy(state: {base_: any; copy_: any}) {\n\tif (!state.copy_) {\n\t\tstate.copy_ = shallowCopy(state.base_)\n\t}\n}\n","import {\n\tIProduceWithPatches,\n\tIProduce,\n\tImmerState,\n\tDrafted,\n\tisDraftable,\n\tprocessResult,\n\tPatch,\n\tObjectish,\n\tDRAFT_STATE,\n\tDraft,\n\tPatchListener,\n\tisDraft,\n\tisMap,\n\tisSet,\n\tcreateProxyProxy,\n\tgetPlugin,\n\tdie,\n\thasProxies,\n\tenterScope,\n\trevokeScope,\n\tleaveScope,\n\tusePatchesInScope,\n\tgetCurrentScope,\n\tNOTHING,\n\tfreeze,\n\tcurrent\n} from \"../internal\"\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport class Immer implements ProducersFns {\n\tuseProxies_: boolean = hasProxies\n\n\tautoFreeze_: boolean = true\n\n\tconstructor(config?: {useProxies?: boolean; autoFreeze?: boolean}) {\n\t\tif (typeof config?.useProxies === \"boolean\")\n\t\t\tthis.setUseProxies(config!.useProxies)\n\t\tif (typeof config?.autoFreeze === \"boolean\")\n\t\t\tthis.setAutoFreeze(config!.autoFreeze)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce: IProduce = (base: any, recipe?: any, patchListener?: any) => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\tif (typeof recipe !== \"function\") die(6)\n\t\tif (patchListener !== undefined && typeof patchListener !== \"function\")\n\t\t\tdie(7)\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = enterScope(this)\n\t\t\tconst proxy = createProxy(this, base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) revokeScope(scope)\n\t\t\t\telse leaveScope(scope)\n\t\t\t}\n\t\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\t\treturn result.then(\n\t\t\t\t\tresult => {\n\t\t\t\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\t\t\t\treturn processResult(result, scope)\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\trevokeScope(scope)\n\t\t\t\t\t\tthrow error\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\treturn processResult(result, scope)\n\t\t} else if (!base || typeof base !== \"object\") {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === undefined) result = base\n\t\t\tif (result === NOTHING) result = undefined\n\t\t\tif (this.autoFreeze_) freeze(result, true)\n\t\t\tif (patchListener) {\n\t\t\t\tconst p: Patch[] = []\n\t\t\t\tconst ip: Patch[] = []\n\t\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip)\n\t\t\t\tpatchListener(p, ip)\n\t\t\t}\n\t\t\treturn result\n\t\t} else die(21, base)\n\t}\n\n\tproduceWithPatches: IProduceWithPatches = (base: any, recipe?: any): any => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => base(draft, ...args))\n\t\t}\n\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst result = this.produce(base, recipe, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\n\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\treturn result.then(nextState => [nextState, patches!, inversePatches!])\n\t\t}\n\t\treturn [result, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Draft<T> {\n\t\tif (!isDraftable(base)) die(8)\n\t\tif (isDraft(base)) base = current(base)\n\t\tconst scope = enterScope(this)\n\t\tconst proxy = createProxy(this, base, undefined)\n\t\tproxy[DRAFT_STATE].isManual_ = true\n\t\tleaveScope(scope)\n\t\treturn proxy as any\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && (draft as any)[DRAFT_STATE]\n\t\tif (__DEV__) {\n\t\t\tif (!state || !state.isManual_) die(9)\n\t\t\tif (state.finalized_) die(10)\n\t\t}\n\t\tconst {scope_: scope} = state\n\t\tusePatchesInScope(scope, patchListener)\n\t\treturn processResult(undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is enabled.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze_ = value\n\t}\n\n\t/**\n\t * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n\t * always faster than using ES5 proxies.\n\t *\n\t * By default, feature detection is used, so calling this is rarely necessary.\n\t */\n\tsetUseProxies(value: boolean) {\n\t\tif (value && !hasProxies) {\n\t\t\tdie(20)\n\t\t}\n\t\tthis.useProxies_ = value\n\t}\n\n\tapplyPatches<T extends Objectish>(base: T, patches: Patch[]): T {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// If there was a patch that replaced the entire state, start from the\n\t\t// patch after that.\n\t\tif (i > -1) {\n\t\t\tpatches = patches.slice(i + 1)\n\t\t}\n\n\t\tconst applyPatchesImpl = getPlugin(\"Patches\").applyPatches_\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatchesImpl(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatchesImpl(draft, patches)\n\t\t)\n\t}\n}\n\nexport function createProxy<T extends Objectish>(\n\timmer: Immer,\n\tvalue: T,\n\tparent?: ImmerState\n): Drafted<T, ImmerState> {\n\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\tconst draft: Drafted = isMap(value)\n\t\t? getPlugin(\"MapSet\").proxyMap_(value, parent)\n\t\t: isSet(value)\n\t\t? getPlugin(\"MapSet\").proxySet_(value, parent)\n\t\t: immer.useProxies_\n\t\t? createProxyProxy(value, parent)\n\t\t: getPlugin(\"ES5\").createES5Proxy_(value, parent)\n\n\tconst scope = parent ? parent.scope_ : getCurrentScope()\n\tscope.drafts_.push(draft)\n\treturn draft\n}\n","import {\n\tdie,\n\tisDraft,\n\tshallowCopy,\n\teach,\n\tDRAFT_STATE,\n\tget,\n\tset,\n\tImmerState,\n\tisDraftable,\n\tArchtype,\n\tgetArchtype,\n\tgetPlugin\n} from \"../internal\"\n\n/** Takes a snapshot of the current state of a draft and finalizes it (but without freezing). This is a great utility to print the current state during debugging (no Proxies in the way). The output of current can also be safely leaked outside the producer. */\nexport function current<T>(value: T): T\nexport function current(value: any): any {\n\tif (!isDraft(value)) die(22, value)\n\treturn currentImpl(value)\n}\n\nfunction currentImpl(value: any): any {\n\tif (!isDraftable(value)) return value\n\tconst state: ImmerState | undefined = value[DRAFT_STATE]\n\tlet copy: any\n\tconst archType = getArchtype(value)\n\tif (state) {\n\t\tif (\n\t\t\t!state.modified_ &&\n\t\t\t(state.type_ < 4 || !getPlugin(\"ES5\").hasChanges_(state as any))\n\t\t)\n\t\t\treturn state.base_\n\t\t// Optimization: avoid generating new drafts during copying\n\t\tstate.finalized_ = true\n\t\tcopy = copyHelper(value, archType)\n\t\tstate.finalized_ = false\n\t} else {\n\t\tcopy = copyHelper(value, archType)\n\t}\n\n\teach(copy, (key, childValue) => {\n\t\tif (state && get(state.base_, key) === childValue) return // no need to copy or search in something that didn't change\n\t\tset(copy, key, currentImpl(childValue))\n\t})\n\t// In the future, we might consider freezing here, based on the current settings\n\treturn archType === Archtype.Set ? new Set(copy) : copy\n}\n\nfunction copyHelper(value: any, archType: number): any {\n\t// creates a shallow copy, even if it is a map or set\n\tswitch (archType) {\n\t\tcase Archtype.Map:\n\t\t\treturn new Map(value)\n\t\tcase Archtype.Set:\n\t\t\t// Set will be cloned as array temporarily, so that we can replace individual items\n\t\t\treturn Array.from(value)\n\t}\n\treturn shallowCopy(value)\n}\n","import {\n\tImmerState,\n\tDrafted,\n\tES5ArrayState,\n\tES5ObjectState,\n\teach,\n\thas,\n\tisDraft,\n\tlatest,\n\tDRAFT_STATE,\n\tis,\n\tloadPlugin,\n\tImmerScope,\n\tProxyType,\n\tgetCurrentScope,\n\tdie,\n\tmarkChanged,\n\tobjectTraps,\n\townKeys,\n\tgetOwnPropertyDescriptors\n} from \"../internal\"\n\ntype ES5State = ES5ArrayState | ES5ObjectState\n\nexport function enableES5() {\n\tfunction willFinalizeES5_(\n\t\tscope: ImmerScope,\n\t\tresult: any,\n\t\tisReplaced: boolean\n\t) {\n\t\tif (!isReplaced) {\n\t\t\tif (scope.patches_) {\n\t\t\t\tmarkChangesRecursively(scope.drafts_![0])\n\t\t\t}\n\t\t\t// This is faster when we don't care about which attributes changed.\n\t\t\tmarkChangesSweep(scope.drafts_)\n\t\t}\n\t\t// When a child draft is returned, look for changes.\n\t\telse if (\n\t\t\tisDraft(result) &&\n\t\t\t(result[DRAFT_STATE] as ES5State).scope_ === scope\n\t\t) {\n\t\t\tmarkChangesSweep(scope.drafts_)\n\t\t}\n\t}\n\n\tfunction createES5Draft(isArray: boolean, base: any) {\n\t\tif (isArray) {\n\t\t\tconst draft = new Array(base.length)\n\t\t\tfor (let i = 0; i < base.length; i++)\n\t\t\t\tObject.defineProperty(draft, \"\" + i, proxyProperty(i, true))\n\t\t\treturn draft\n\t\t} else {\n\t\t\tconst descriptors = getOwnPropertyDescriptors(base)\n\t\t\tdelete descriptors[DRAFT_STATE as any]\n\t\t\tconst keys = ownKeys(descriptors)\n\t\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\t\tconst key: any = keys[i]\n\t\t\t\tdescriptors[key] = proxyProperty(\n\t\t\t\t\tkey,\n\t\t\t\t\tisArray || !!descriptors[key].enumerable\n\t\t\t\t)\n\t\t\t}\n\t\t\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n\t\t}\n\t}\n\n\tfunction createES5Proxy_<T>(\n\t\tbase: T,\n\t\tparent?: ImmerState\n\t): Drafted<T, ES5ObjectState | ES5ArrayState> {\n\t\tconst isArray = Array.isArray(base)\n\t\tconst draft = createES5Draft(isArray, base)\n\n\t\tconst state: ES5ObjectState | ES5ArrayState = {\n\t\t\ttype_: isArray ? ProxyType.ES5Array : (ProxyType.ES5Object as any),\n\t\t\tscope_: parent ? parent.scope_ : getCurrentScope(),\n\t\t\tmodified_: false,\n\t\t\tfinalized_: false,\n\t\t\tassigned_: {},\n\t\t\tparent_: parent,\n\t\t\t// base is the object we are drafting\n\t\t\tbase_: base,\n\t\t\t// draft is the draft object itself, that traps all reads and reads from either the base (if unmodified) or copy (if modified)\n\t\t\tdraft_: draft,\n\t\t\tcopy_: null,\n\t\t\trevoked_: false,\n\t\t\tisManual_: false\n\t\t}\n\n\t\tObject.defineProperty(draft, DRAFT_STATE, {\n\t\t\tvalue: state,\n\t\t\t// enumerable: false <- the default\n\t\t\twritable: true\n\t\t})\n\t\treturn draft\n\t}\n\n\t// property descriptors are recycled to make sure we don't create a get and set closure per property,\n\t// but share them all instead\n\tconst descriptors: {[prop: string]: PropertyDescriptor} = {}\n\n\tfunction proxyProperty(\n\t\tprop: string | number,\n\t\tenumerable: boolean\n\t): PropertyDescriptor {\n\t\tlet desc = descriptors[prop]\n\t\tif (desc) {\n\t\t\tdesc.enumerable = enumerable\n\t\t} else {\n\t\t\tdescriptors[prop] = desc = {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable,\n\t\t\t\tget(this: any) {\n\t\t\t\t\tconst state = this[DRAFT_STATE]\n\t\t\t\t\tif (__DEV__) assertUnrevoked(state)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\treturn objectTraps.get(state, prop)\n\t\t\t\t},\n\t\t\t\tset(this: any, value) {\n\t\t\t\t\tconst state = this[DRAFT_STATE]\n\t\t\t\t\tif (__DEV__) assertUnrevoked(state)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tobjectTraps.set(state, prop, value)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn desc\n\t}\n\n\t// This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\n\tfunction markChangesSweep(drafts: Drafted<any, ImmerState>[]) {\n\t\t// The natural order of drafts in the `scope` array is based on when they\n\t\t// were accessed. By processing drafts in reverse natural order, we have a\n\t\t// better chance of processing leaf nodes first. When a leaf node is known to\n\t\t// have changed, we can avoid any traversal of its ancestor nodes.\n\t\tfor (let i = drafts.length - 1; i >= 0; i--) {\n\t\t\tconst state: ES5State = drafts[i][DRAFT_STATE]\n\t\t\tif (!state.modified_) {\n\t\t\t\tswitch (state.type_) {\n\t\t\t\t\tcase ProxyType.ES5Array:\n\t\t\t\t\t\tif (hasArrayChanges(state)) markChanged(state)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase ProxyType.ES5Object:\n\t\t\t\t\t\tif (hasObjectChanges(state)) markChanged(state)\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction markChangesRecursively(object: any) {\n\t\tif (!object || typeof object !== \"object\") return\n\t\tconst state: ES5State | undefined = object[DRAFT_STATE]\n\t\tif (!state) return\n\t\tconst {base_, draft_, assigned_, type_} = state\n\t\tif (type_ === ProxyType.ES5Object) {\n\t\t\t// Look for added keys.\n\t\t\t// probably there is a faster way to detect changes, as sweep + recurse seems to do some\n\t\t\t// unnecessary work.\n\t\t\t// also: probably we can store the information we detect here, to speed up tree finalization!\n\t\t\teach(draft_, key => {\n\t\t\t\tif ((key as any) === DRAFT_STATE) return\n\t\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\t\tif ((base_ as any)[key] === undefined && !has(base_, key)) {\n\t\t\t\t\tassigned_[key] = true\n\t\t\t\t\tmarkChanged(state)\n\t\t\t\t} else if (!assigned_[key]) {\n\t\t\t\t\t// Only untouched properties trigger recursion.\n\t\t\t\t\tmarkChangesRecursively(draft_[key])\n\t\t\t\t}\n\t\t\t})\n\t\t\t// Look for removed keys.\n\t\t\teach(base_, key => {\n\t\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\t\tif (draft_[key] === undefined && !has(draft_, key)) {\n\t\t\t\t\tassigned_[key] = false\n\t\t\t\t\tmarkChanged(state)\n\t\t\t\t}\n\t\t\t})\n\t\t} else if (type_ === ProxyType.ES5Array) {\n\t\t\tif (hasArrayChanges(state as ES5ArrayState)) {\n\t\t\t\tmarkChanged(state)\n\t\t\t\tassigned_.length = true\n\t\t\t}\n\n\t\t\tif (draft_.length < base_.length) {\n\t\t\t\tfor (let i = draft_.length; i < base_.length; i++) assigned_[i] = false\n\t\t\t} else {\n\t\t\t\tfor (let i = base_.length; i < draft_.length; i++) assigned_[i] = true\n\t\t\t}\n\n\t\t\t// Minimum count is enough, the other parts has been processed.\n\t\t\tconst min = Math.min(draft_.length, base_.length)\n\n\t\t\tfor (let i = 0; i < min; i++) {\n\t\t\t\t// Only untouched indices trigger recursion.\n\t\t\t\tif (!draft_.hasOwnProperty(i)) {\n\t\t\t\t\tassigned_[i] = true\n\t\t\t\t}\n\t\t\t\tif (assigned_[i] === undefined) markChangesRecursively(draft_[i])\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction hasObjectChanges(state: ES5ObjectState) {\n\t\tconst {base_, draft_} = state\n\n\t\t// Search for added keys and changed keys. Start at the back, because\n\t\t// non-numeric keys are ordered by time of definition on the object.\n\t\tconst keys = ownKeys(draft_)\n\t\tfor (let i = keys.length - 1; i >= 0; i--) {\n\t\t\tconst key: any = keys[i]\n\t\t\tif (key === DRAFT_STATE) continue\n\t\t\tconst baseValue = base_[key]\n\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\tif (baseValue === undefined && !has(base_, key)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\t// Once a base key is deleted, future changes go undetected, because its\n\t\t\t// descriptor is erased. This branch detects any missed changes.\n\t\t\telse {\n\t\t\t\tconst value = draft_[key]\n\t\t\t\tconst state: ImmerState = value && value[DRAFT_STATE]\n\t\t\t\tif (state ? state.base_ !== baseValue : !is(value, baseValue)) {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// At this point, no keys were added or changed.\n\t\t// Compare key count to determine if keys were deleted.\n\t\tconst baseIsDraft = !!base_[DRAFT_STATE as any]\n\t\treturn keys.length !== ownKeys(base_).length + (baseIsDraft ? 0 : 1) // + 1 to correct for DRAFT_STATE\n\t}\n\n\tfunction hasArrayChanges(state: ES5ArrayState) {\n\t\tconst {draft_} = state\n\t\tif (draft_.length !== state.base_.length) return true\n\t\t// See #116\n\t\t// If we first shorten the length, our array interceptors will be removed.\n\t\t// If after that new items are added, result in the same original length,\n\t\t// those last items will have no intercepting property.\n\t\t// So if there is no own descriptor on the last position, we know that items were removed and added\n\t\t// N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n\t\t// the last one\n\t\t// last descriptor can be not a trap, if the array was extended\n\t\tconst descriptor = Object.getOwnPropertyDescriptor(\n\t\t\tdraft_,\n\t\t\tdraft_.length - 1\n\t\t)\n\t\t// descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\t\tif (descriptor && !descriptor.get) return true\n\t\t// if we miss a property, it has been deleted, so array probobaly changed\n\t\tfor (let i = 0; i < draft_.length; i++) {\n\t\t\tif (!draft_.hasOwnProperty(i)) return true\n\t\t}\n\t\t// For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\t\treturn false\n\t}\n\n\tfunction hasChanges_(state: ES5State) {\n\t\treturn state.type_ === ProxyType.ES5Object\n\t\t\t? hasObjectChanges(state)\n\t\t\t: hasArrayChanges(state)\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"ES5\", {\n\t\tcreateES5Proxy_,\n\t\twillFinalizeES5_,\n\t\thasChanges_\n\t})\n}\n","import {immerable} from \"../immer\"\nimport {\n\tImmerState,\n\tPatch,\n\tSetState,\n\tES5ArrayState,\n\tProxyArrayState,\n\tMapState,\n\tES5ObjectState,\n\tProxyObjectState,\n\tPatchPath,\n\tget,\n\teach,\n\thas,\n\tgetArchtype,\n\tisSet,\n\tisMap,\n\tloadPlugin,\n\tProxyType,\n\tArchtype,\n\tdie,\n\tisDraft,\n\tisDraftable,\n\tNOTHING\n} from \"../internal\"\n\nexport function enablePatches() {\n\tconst REPLACE = \"replace\"\n\tconst ADD = \"add\"\n\tconst REMOVE = \"remove\"\n\n\tfunction generatePatches_(\n\t\tstate: ImmerState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tswitch (state.type_) {\n\t\t\tcase ProxyType.ProxyObject:\n\t\t\tcase ProxyType.ES5Object:\n\t\t\tcase ProxyType.Map:\n\t\t\t\treturn generatePatchesFromAssigned(\n\t\t\t\t\tstate,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t\tcase ProxyType.ES5Array:\n\t\t\tcase ProxyType.ProxyArray:\n\t\t\t\treturn generateArrayPatches(state, basePath, patches, inversePatches)\n\t\t\tcase ProxyType.Set:\n\t\t\t\treturn generateSetPatches(\n\t\t\t\t\t(state as any) as SetState,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t}\n\t}\n\n\tfunction generateArrayPatches(\n\t\tstate: ES5ArrayState | ProxyArrayState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, assigned_} = state\n\t\tlet copy_ = state.copy_!\n\n\t\t// Reduce complexity by ensuring `base` is never longer.\n\t\tif (copy_.length < base_.length) {\n\t\t\t// @ts-ignore\n\t\t\t;[base_, copy_] = [copy_, base_]\n\t\t\t;[patches, inversePatches] = [inversePatches, patches]\n\t\t}\n\n\t\t// Process replaced indices.\n\t\tfor (let i = 0; i < base_.length; i++) {\n\t\t\tif (assigned_[i] && copy_[i] !== base_[i]) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t\t})\n\t\t\t\tinversePatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(base_[i])\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\t// Process added indices.\n\t\tfor (let i = base_.length; i < copy_.length; i++) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: ADD,\n\t\t\t\tpath,\n\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t})\n\t\t}\n\t\tif (base_.length < copy_.length) {\n\t\t\tinversePatches.push({\n\t\t\t\top: REPLACE,\n\t\t\t\tpath: basePath.concat([\"length\"]),\n\t\t\t\tvalue: base_.length\n\t\t\t})\n\t\t}\n\t}\n\n\t// This is used for both Map objects and normal objects.\n\tfunction generatePatchesFromAssigned(\n\t\tstate: MapState | ES5ObjectState | ProxyObjectState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tconst {base_, copy_} = state\n\t\teach(state.assigned_!, (key, assignedValue) => {\n\t\t\tconst origValue = get(base_, key)\n\t\t\tconst value = get(copy_!, key)\n\t\t\tconst op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD\n\t\t\tif (origValue === value && op === REPLACE) return\n\t\t\tconst path = basePath.concat(key as any)\n\t\t\tpatches.push(op === REMOVE ? {op, path} : {op, path, value})\n\t\t\tinversePatches.push(\n\t\t\t\top === ADD\n\t\t\t\t\t? {op: REMOVE, path}\n\t\t\t\t\t: op === REMOVE\n\t\t\t\t\t? {op: ADD, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t\t\t: {op: REPLACE, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t)\n\t\t})\n\t}\n\n\tfunction generateSetPatches(\n\t\tstate: SetState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, copy_} = state\n\n\t\tlet i = 0\n\t\tbase_.forEach((value: any) => {\n\t\t\tif (!copy_!.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t\ti = 0\n\t\tcopy_!.forEach((value: any) => {\n\t\t\tif (!base_.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t}\n\n\tfunction generateReplacementPatches_(\n\t\tbaseValue: any,\n\t\treplacement: any,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tpatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: replacement === NOTHING ? undefined : replacement\n\t\t})\n\t\tinversePatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: baseValue\n\t\t})\n\t}\n\n\tfunction applyPatches_<T>(draft: T, patches: Patch[]): T {\n\t\tpatches.forEach(patch => {\n\t\t\tconst {path, op} = patch\n\n\t\t\tlet base: any = draft\n\t\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\t\tconst parentType = getArchtype(base)\n\t\t\t\tlet p = path[i]\n\t\t\t\tif (typeof p !== \"string\" && typeof p !== \"number\") {\n\t\t\t\t\tp = \"\" + p\n\t\t\t\t}\n\n\t\t\t\t// See #738, avoid prototype pollution\n\t\t\t\tif (\n\t\t\t\t\t(parentType === Archtype.Object || parentType === Archtype.Array) &&\n\t\t\t\t\t(p === \"__proto__\" || p === \"constructor\")\n\t\t\t\t)\n\t\t\t\t\tdie(24)\n\t\t\t\tif (typeof base === \"function\" && p === \"prototype\") die(24)\n\t\t\t\tbase = get(base, p)\n\t\t\t\tif (typeof base !== \"object\") die(15, path.join(\"/\"))\n\t\t\t}\n\n\t\t\tconst type = getArchtype(base)\n\t\t\tconst value = deepClonePatchValue(patch.value) // used to clone patch to ensure original patch is not modified, see #411\n\t\t\tconst key = path[path.length - 1]\n\t\t\tswitch (op) {\n\t\t\t\tcase REPLACE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\t\tdie(16)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// if value is an object, then it's assigned by reference\n\t\t\t\t\t\t\t// in the following add or remove ops, the value field inside the patch will also be modifyed\n\t\t\t\t\t\t\t// so we use value from the cloned patch\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase ADD:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase Archtype.Array:\n\t\t\t\t\t\t\treturn key === \"-\"\n\t\t\t\t\t\t\t\t? base.push(value)\n\t\t\t\t\t\t\t\t: base.splice(key as any, 0, value)\n\t\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\t\treturn base.add(value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase REMOVE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase Archtype.Array:\n\t\t\t\t\t\t\treturn base.splice(key as any, 1)\n\t\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\t\treturn base.delete(key)\n\t\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\t\treturn base.delete(patch.value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn delete base[key]\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tdie(17, op)\n\t\t\t}\n\t\t})\n\n\t\treturn draft\n\t}\n\n\t// optimize: this is quite a performance hit, can we detect intelligently when it is needed?\n\t// E.g. auto-draft when new objects from outside are assigned and modified?\n\t// (See failing test when deepClone just returns obj)\n\tfunction deepClonePatchValue<T>(obj: T): T\n\tfunction deepClonePatchValue(obj: any) {\n\t\tif (!isDraftable(obj)) return obj\n\t\tif (Array.isArray(obj)) return obj.map(deepClonePatchValue)\n\t\tif (isMap(obj))\n\t\t\treturn new Map(\n\t\t\t\tArray.from(obj.entries()).map(([k, v]) => [k, deepClonePatchValue(v)])\n\t\t\t)\n\t\tif (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue))\n\t\tconst cloned = Object.create(Object.getPrototypeOf(obj))\n\t\tfor (const key in obj) cloned[key] = deepClonePatchValue(obj[key])\n\t\tif (has(obj, immerable)) cloned[immerable] = obj[immerable]\n\t\treturn cloned\n\t}\n\n\tfunction clonePatchValueIfNeeded<T>(obj: T): T {\n\t\tif (isDraft(obj)) {\n\t\t\treturn deepClonePatchValue(obj)\n\t\t} else return obj\n\t}\n\n\tloadPlugin(\"Patches\", {\n\t\tapplyPatches_,\n\t\tgeneratePatches_,\n\t\tgenerateReplacementPatches_\n\t})\n}\n","// types only!\nimport {\n\tImmerState,\n\tAnyMap,\n\tAnySet,\n\tMapState,\n\tSetState,\n\tDRAFT_STATE,\n\tgetCurrentScope,\n\tlatest,\n\titeratorSymbol,\n\tisDraftable,\n\tcreateProxy,\n\tloadPlugin,\n\tmarkChanged,\n\tProxyType,\n\tdie,\n\teach\n} from \"../internal\"\n\nexport function enableMapSet() {\n\t/* istanbul ignore next */\n\tvar extendStatics = function(d: any, b: any): any {\n\t\textendStatics =\n\t\t\tObject.setPrototypeOf ||\n\t\t\t({__proto__: []} instanceof Array &&\n\t\t\t\tfunction(d, b) {\n\t\t\t\t\td.__proto__ = b\n\t\t\t\t}) ||\n\t\t\tfunction(d, b) {\n\t\t\t\tfor (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]\n\t\t\t}\n\t\treturn extendStatics(d, b)\n\t}\n\n\t// Ugly hack to resolve #502 and inherit built in Map / Set\n\tfunction __extends(d: any, b: any): any {\n\t\textendStatics(d, b)\n\t\tfunction __(this: any): any {\n\t\t\tthis.constructor = d\n\t\t}\n\t\td.prototype =\n\t\t\t// @ts-ignore\n\t\t\t((__.prototype = b.prototype), new __())\n\t}\n\n\tconst DraftMap = (function(_super) {\n\t\t__extends(DraftMap, _super)\n\t\t// Create class manually, cause #502\n\t\tfunction DraftMap(this: any, target: AnyMap, parent?: ImmerState): any {\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ProxyType.Map,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tassigned_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this as any,\n\t\t\t\tisManual_: false,\n\t\t\t\trevoked_: false\n\t\t\t} as MapState\n\t\t\treturn this\n\t\t}\n\t\tconst p = DraftMap.prototype\n\n\t\tObject.defineProperty(p, \"size\", {\n\t\t\tget: function() {\n\t\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t\t}\n\t\t\t// enumerable: false,\n\t\t\t// configurable: true\n\t\t})\n\n\t\tp.has = function(key: any): boolean {\n\t\t\treturn latest(this[DRAFT_STATE]).has(key)\n\t\t}\n\n\t\tp.set = function(key: any, value: any) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!latest(state).has(key) || latest(state).get(key) !== value) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t\tstate.copy_!.set(key, value)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tp.delete = function(key: any): boolean {\n\t\t\tif (!this.has(key)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareMapCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\tif (state.base_.has(key)) {\n\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t} else {\n\t\t\t\tstate.assigned_!.delete(key)\n\t\t\t}\n\t\t\tstate.copy_!.delete(key)\n\t\t\treturn true\n\t\t}\n\n\t\tp.clear = function() {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_ = new Map()\n\t\t\t\teach(state.base_, key => {\n\t\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t\t})\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tp.forEach = function(\n\t\t\tcb: (value: any, key: any, self: any) => void,\n\t\t\tthisArg?: any\n\t\t) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tlatest(state).forEach((_value: any, key: any, _map: any) => {\n\t\t\t\tcb.call(thisArg, this.get(key), key, this)\n\t\t\t})\n\t\t}\n\n\t\tp.get = function(key: any): any {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tconst value = latest(state).get(key)\n\t\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\t\treturn value\n\t\t\t}\n\t\t\tif (value !== state.base_.get(key)) {\n\t\t\t\treturn value // either already drafted or reassigned\n\t\t\t}\n\t\t\t// despite what it looks, this creates a draft only once, see above condition\n\t\t\tconst draft = createProxy(state.scope_.immer_, value, state)\n\t\t\tprepareMapCopy(state)\n\t\t\tstate.copy_!.set(key, draft)\n\t\t\treturn draft\n\t\t}\n\n\t\tp.keys = function(): IterableIterator<any> {\n\t\t\treturn latest(this[DRAFT_STATE]).keys()\n\t\t}\n\n\t\tp.values = function(): IterableIterator<any> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[iteratorSymbol]: () => this.values(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\tp.entries = function(): IterableIterator<[any, any]> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[iteratorSymbol]: () => this.entries(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: [r.value, value]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\tp[iteratorSymbol] = function() {\n\t\t\treturn this.entries()\n\t\t}\n\n\t\treturn DraftMap\n\t})(Map)\n\n\tfunction proxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftMap(target, parent)\n\t}\n\n\tfunction prepareMapCopy(state: MapState) {\n\t\tif (!state.copy_) {\n\t\t\tstate.assigned_ = new Map()\n\t\t\tstate.copy_ = new Map(state.base_)\n\t\t}\n\t}\n\n\tconst DraftSet = (function(_super) {\n\t\t__extends(DraftSet, _super)\n\t\t// Create class manually, cause #502\n\t\tfunction DraftSet(this: any, target: AnySet, parent?: ImmerState) {\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ProxyType.Set,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this,\n\t\t\t\tdrafts_: new Map(),\n\t\t\t\trevoked_: false,\n\t\t\t\tisManual_: false\n\t\t\t} as SetState\n\t\t\treturn this\n\t\t}\n\t\tconst p = DraftSet.prototype\n\n\t\tObject.defineProperty(p, \"size\", {\n\t\t\tget: function() {\n\t\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t\t}\n\t\t\t// enumerable: true,\n\t\t})\n\n\t\tp.has = function(value: any): boolean {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\t// bit of trickery here, to be able to recognize both the value, and the draft of its value\n\t\t\tif (!state.copy_) {\n\t\t\t\treturn state.base_.has(value)\n\t\t\t}\n\t\t\tif (state.copy_.has(value)) return true\n\t\t\tif (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value)))\n\t\t\t\treturn true\n\t\t\treturn false\n\t\t}\n\n\t\tp.add = function(value: any): any {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!this.has(value)) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.add(value)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tp.delete = function(value: any): any {\n\t\t\tif (!this.has(value)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\treturn (\n\t\t\t\tstate.copy_!.delete(value) ||\n\t\t\t\t(state.drafts_.has(value)\n\t\t\t\t\t? state.copy_!.delete(state.drafts_.get(value))\n\t\t\t\t\t: /* istanbul ignore next */ false)\n\t\t\t)\n\t\t}\n\n\t\tp.clear = function() {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tp.values = function(): IterableIterator<any> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.values()\n\t\t}\n\n\t\tp.entries = function entries(): IterableIterator<[any, any]> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.entries()\n\t\t}\n\n\t\tp.keys = function(): IterableIterator<any> {\n\t\t\treturn this.values()\n\t\t}\n\n\t\tp[iteratorSymbol] = function() {\n\t\t\treturn this.values()\n\t\t}\n\n\t\tp.forEach = function forEach(cb: any, thisArg?: any) {\n\t\t\tconst iterator = this.values()\n\t\t\tlet result = iterator.next()\n\t\t\twhile (!result.done) {\n\t\t\t\tcb.call(thisArg, result.value, result.value, this)\n\t\t\t\tresult = iterator.next()\n\t\t\t}\n\t\t}\n\n\t\treturn DraftSet\n\t})(Set)\n\n\tfunction proxySet_<T extends AnySet>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftSet(target, parent)\n\t}\n\n\tfunction prepareSetCopy(state: SetState) {\n\t\tif (!state.copy_) {\n\t\t\t// create drafts for all entries to preserve insertion order\n\t\t\tstate.copy_ = new Set()\n\t\t\tstate.base_.forEach(value => {\n\t\t\t\tif (isDraftable(value)) {\n\t\t\t\t\tconst draft = createProxy(state.scope_.immer_, value, state)\n\t\t\t\t\tstate.drafts_.set(value, draft)\n\t\t\t\t\tstate.copy_!.add(draft)\n\t\t\t\t} else {\n\t\t\t\t\tstate.copy_!.add(value)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"MapSet\", {proxyMap_, proxySet_})\n}\n","import {enableES5} from \"./es5\"\nimport {enableMapSet} from \"./mapset\"\nimport {enablePatches} from \"./patches\"\n\nexport function enableAllPlugins() {\n\tenableES5()\n\tenableMapSet()\n\tenablePatches()\n}\n","import {\n\tIProduce,\n\tIProduceWithPatches,\n\tImmer,\n\tDraft,\n\tImmutable\n} from \"./internal\"\n\nexport {\n\tDraft,\n\tImmutable,\n\tPatch,\n\tPatchListener,\n\toriginal,\n\tcurrent,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable,\n\tfreeze\n} from \"./internal\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = immer.produce\nexport default produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * Always freeze by default, even in production mode\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\nexport const setUseProxies = immer.setUseProxies.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\n/**\n * This function is actually a no-op, but can be used to cast an immutable type\n * to an draft type and make TypeScript happy\n *\n * @param value\n */\nexport function castDraft<T>(value: T): Draft<T> {\n\treturn value as any\n}\n\n/**\n * This function is actually a no-op, but can be used to cast a mutable type\n * to an immutable type and make TypeScript happy\n * @param value\n */\nexport function castImmutable<T>(value: T): Immutable<T> {\n\treturn value as any\n}\n\nexport {Immer}\n\nexport {enableES5} from \"./plugins/es5\"\nexport {enablePatches} from \"./plugins/patches\"\nexport {enableMapSet} from \"./plugins/mapset\"\nexport {enableAllPlugins} from \"./plugins/all\"\n"]},"metadata":{},"sourceType":"script"}